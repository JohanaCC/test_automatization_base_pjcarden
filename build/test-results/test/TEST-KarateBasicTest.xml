<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="KarateBasicTest" tests="10" skipped="0" failures="0" errors="0" timestamp="2025-06-20T16:20:30" hostname="MSI" time="4.914">
  <properties/>
  <testcase name="[1:19] T-API-HU-EvalPC001-CA01-Obtener lista vacÃ­a de personajes 200 - karate" classname="KarateBasicTest" time="1.79"/>
  <testcase name="[2:28] T-API-HU-EvalPC001-CA02-Obtener personaje por ID exitoso 200 - karate (Si falla alguien borro mi Doraemon :/)" classname="KarateBasicTest" time="0.234"/>
  <testcase name="[3:38] T-API-HU-EvalPC001-CA03-Obtener personaje por ID no existe 404 - karate" classname="KarateBasicTest" time="0.226"/>
  <testcase name="[4:46] T-API-HU-EvalPC001-CA04-Crear personaje exitosamente 201 - karate" classname="KarateBasicTest" time="0.283"/>
  <testcase name="[5:58] T-API-HU-EvalPC001-CA05-Crear personaje con nombre duplicado 400 - karate" classname="KarateBasicTest" time="0.214"/>
  <testcase name="[6:66] T-API-HU-EvalPC001-CA06-Crear personaje faltan campos requeridos 400 - karate" classname="KarateBasicTest" time="0.221"/>
  <testcase name="[7:74] T-API-HU-EvalPC001-CA07-Actualizar personaje exitosamente 200 - karate" classname="KarateBasicTest" time="0.213"/>
  <testcase name="[8:83] T-API-HU-EvalPC001-CA08-Actualizar personaje no existe 404 - karate" classname="KarateBasicTest" time="0.218"/>
  <testcase name="[9:91] T-API-HU-EvalPC001-CA04-Crear y eliminar personaje exitosamente - karate" classname="KarateBasicTest" time="0.453"/>
  <testcase name="[10:110] T-API-HU-EvalPC001-CA10-Eliminar personaje no existe 404 - karate" classname="KarateBasicTest" time="1.048"/>
  <system-out><![CDATA[11:20:31.759 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
11:20:31.764 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
11:20:31.764 [Test worker] DEBUG com.intuit.karate -- request:
1 > GET http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters
1 > Content-Type: application/json
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
1 > Accept-Encoding: gzip,deflate


11:20:31.775 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
11:20:31.782 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 0][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:31.782 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
11:20:31.789 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/54.165.58.209:80
11:20:31.887 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.18.45:42399<->54.165.58.209:80
11:20:31.889 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-0: set socket timeout to 30000
11:20:31.889 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request GET /testuser/api/characters HTTP/1.1
11:20:31.889 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
11:20:31.889 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
11:20:31.889 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> GET /testuser/api/characters HTTP/1.1
11:20:31.889 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> Content-Type: application/json
11:20:31.889 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
11:20:31.889 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> Connection: Keep-Alive
11:20:31.889 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
11:20:31.889 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> Accept-Encoding: gzip,deflate
11:20:31.889 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "GET /testuser/api/characters HTTP/1.1[\r][\n]"
11:20:31.889 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "Content-Type: application/json[\r][\n]"
11:20:31.889 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
11:20:31.889 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "Connection: Keep-Alive[\r][\n]"
11:20:31.889 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)[\r][\n]"
11:20:31.889 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "Accept-Encoding: gzip,deflate[\r][\n]"
11:20:31.889 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "HTTP/1.1 200 [\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Server: Cowboy[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436431&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=Zq8x1PGCgAaehw95%2FNZUTUsxyKr2k7djpnk%2FbvgLOs4%3D"}]}[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436431&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=Zq8x1PGCgAaehw95%2FNZUTUsxyKr2k7djpnk%2FbvgLOs4%3D[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Connection: keep-alive[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Content-Type: application/json[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Transfer-Encoding: chunked[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Date: Fri, 20 Jun 2025 16:20:31 GMT[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Via: 1.1 vegur[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:31.992 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "[{"id":33,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":34,"name":"Valid Character-1750394792389","alterego":"Valid Alter","description":"Valid description","powers":["Power1","Power2"]},{"id":37,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description Jose","powers":["Armor","Flight"]},{"id":39,"name":"Test Special-1750394871627","alterego":"Special Alter","description":"Description with symbols","powers":["Power1","Power2"]},{"id":42,"name":"Iron Man","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":44,"name":"Iron Man2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":45,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description7xj82r1x","powers":["Armor","Flight"]},{"id":47,"name":"SY","alterego":"SYS","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":48,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":49,"name":"Iron Man3","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":50,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":53,"name":"Red Ranger","alterego":"Jason","description":"Red Power Ranger","powers":["Armor","Fight"]},{"id":55,"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]},{"id":56,"name":"Spider-Man","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":58,"name":"Gerson Veramendi","alterego":"Senior FullStack Developer","description":"Genius billionaire","powers":["Java","Python","JavaScript","TypeScript","PHP",".NET"]},{"id":59,"name":"KarateTestUser","alterego":"Karate Alter","description":"Personaje creado para pruebas autom[0xc3][0xa1]ticas","powers":["TestPower1","TestPower2"]},{"id":63,"name":"Eduardo Vizuete","alterego":"eduviz","description":"eduardo dev","powers":["Armor","Flight"]},{"id":65,"name":"Iron Maiden","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":66,"name":"Iron Man 1750431405867","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":67,"name":"Iron Man Test3 1750431406349","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":68,"name":"Iron Man Test5 1750431407189","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":69,"name":"Iron Man Test7 1750431410793","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":71,"name":"Spider-Man "
11:20:31.992 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << HTTP/1.1 200 
11:20:31.992 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Server: Cowboy
11:20:31.992 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436431&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=Zq8x1PGCgAaehw95%2FNZUTUsxyKr2k7djpnk%2FbvgLOs4%3D"}]}
11:20:31.992 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436431&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=Zq8x1PGCgAaehw95%2FNZUTUsxyKr2k7djpnk%2FbvgLOs4%3D
11:20:31.992 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
11:20:31.992 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Connection: keep-alive
11:20:31.992 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Content-Type: application/json
11:20:31.992 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Transfer-Encoding: chunked
11:20:31.992 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Date: Fri, 20 Jun 2025 16:20:31 GMT
11:20:31.992 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Via: 1.1 vegur
11:20:32.001 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
11:20:32.004 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Test11 1750431412674","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":72,"name":"Captain America Test11 1750431412674","alterego":"Steve Rogers","description":"S[0xc3][0xba]per soldado","powers":["Fuerza","Escudo","Liderazgo"]},{"id":73,"name":"kcatucuamba","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":74,"name":"Iron Man 1750431456185","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":75,"name":"Iron Man Test3 1750431456502","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":76,"name":"Iron Man Test5 1750431457318","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":77,"name":"Iron Man Test7 1750431458110","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":79,"name":"Spider-Man Test11 1750431459939","alterego"
11:20:32.004 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":80,"name":"Captain America Test11 1750431459939","alterego":"Steve Rogers","description":"S[0xc3][0xba]per soldado","powers":["Fuerza","Escudo","Liderazgo"]},{"id":81,"name":"Iron ManX","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":83,"name":"Chapulin-Colorado","alterego":"Chespirito","description":"mas fuerte que un raton","powers":["Valent[0xc3][0xad]a","Humor"]},{"id":84,"name":"Iron Man 22a4ce49-91b0-462d-828a-40b438ac05d7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":87,"name":"JSI","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":90,"name":"Iron Man 2","alterego":"Tony Dark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":91,"name":"Iron Man 0192799a-9023-415b-828c-92b298e570da","alterego":"Tony Stark","description":"Genius billionaire","powers""
11:20:32.004 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ":["Armor","Flight"]},{"id":92,"name":"Iron Man 3","alterego":"Tony Dark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":94,"name":"CohetePlus9","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":95,"name":"Test Character 1750431844448","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":96,"name":"Test Character 1750431845069","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":97,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":99,"name":"Test Character 1750431846880","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":101,"name":"Test Character 1750431889143","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":102,"name":"Test Character 1750431889375","al"
11:20:32.004 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "terego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":103,"name":"Test Character 1750431889993","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":104,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":106,"name":"Test Character 1750431891804","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":108,"name":"Spider-Man Eva","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":109,"name":"Iron Manssss2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":110,"name":"Test Character 1750431950573","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":111,"name":"Test Character 1750431951720","alterego":"Test Al"
11:20:32.004 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "ter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":117,"name":"Diego Zurita","alterego":"Diego","description":"Poderoso","powers":["Fuerte"]},{"id":118,"name":"Test Character 1750432019426","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":119,"name":"Test Character 1750432019668","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":120,"name":"Nuevo Personaje","alterego":"Alter Ego","description":"Descripci[0xc3][0xb3]n del nuevo personaje","powers":["Poder1","Poder2"]},{"id":121,"name":"Iron Manf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":122,"name":"Test Character 1750432020309","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":123,"name":"Iron Man Full v2","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":125,""
11:20:32.004 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "name":"Test Character 1750432022197","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":126,"name":"Iron Man 53ca6cc1-a1bd-4f2b-93f9-1633be1aad6b","alterego":"Tony Stark","description":"Genius bil[\r][\n]"
11:20:32.004 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.004 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "lionaire","powers":["Armor","Flight"]},{"id":127,"name":"Hulk 38179ff8-3a8b-4688-8f37-3e731ac47905","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":128,"name":"Iron Man 449254f2-2df9-477d-acc7-69fc740caffd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":129,"name":"Hulk 46ce508f-89e3-4b05-bc80-25c9a16123a4","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":130,"name":"Thor 2e08893c-7920-498d-90f9-3343b0a54908","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":131,"name":"Iron Man ac45fd26-8b98-487d-81c9-f2e9d934384e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":133,"name":"Santiago Sanchez","alterego":"Santi S","description":"Ingeniero","powers":["Fuerte","Inteligente"]},{"id":134,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":136,"name":"Iron Man 200","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":137,"name":"Iron Man Eva","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":138,"name":"Test Character 1750432250612","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":139,"name":"Test Character 1750432250854","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":140,"name":"Test Character 1750432251501","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":141,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":143,"name":"Test Character 1750432253388","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":144,"name":"Iron Man 86dcbb11-1522-4457-afd9-398d1c189b8a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":146,"name":"Hulk eea541c7-2292-4cef-af8c-d19a81e39cb9","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":147,"name":"Thor 6fa4faf3-c0bb-475d-b0c9-1570131ddcc6","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":148,"name":"Capitan America de7de8bc-4a24-4313-9cfe-200dfa6d2775","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":149,"name":"IronMan-92ac203d-0658-432a-8ebc-e6466d1eb66f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":151,"name":"Spider-Man-5","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":152,"name":"Iron Man e354d0ac-a1c2-46aa-be2e-f1d6d8f9b459","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":153,"name":"Hulk e459e8d2-7af9-4bf7-b9d5-22a9f453fffb","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":154,"name":"Thor 2e94238c-4bea-45ec-b042-00ed2e7e8fb3","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":155,"name":"Capitan America 9da54d03-62b6-49ac-9b9e-164d80e3c02d","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":157,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":158,"name":"Hulk 291f5440-5a17-48a4-bdec-192aa5ad91a7","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":159,"name":"Thor 3610678a-d9c8-4848-b133-4c7ebb9b1f6d","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":160,"name":"Capitan America 5c6fb5f4-1f84-4149-87d5-f09499cebe3b","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":162,"name":"Spider-Man-6","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trep"
11:20:32.092 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "ar muros"]},{"id":163,"name":"Captain Marvel","alterego":"Carol Danvers","description":"the biggest hero in the world","powers":["Flight","Force"]},{"id":164,"name":"Iron Man dde04cc2-ac24-4eb4-ac77-ab5592d642fc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":165,"name":"Hulk c06d00b0-f944-432e-8cbe-646bb23e5422","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":166,"name":"Thor e04e9665-ee54-4b9c-baa4-44a41efd1133","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":167,"name":"Capitan America 65bfa9f4-efcd-4f20-8f98-a824c7d8eac4","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":169,"name":"Test Character 1750432373791","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":170,"name":"Test Character 1750432374022","alterego":"Test Alter Ego","description":"Test Description","power"
11:20:32.092 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "s":["Test Power 1","Test Power 2"]},{"id":171,"name":"Test Character 1750432374630","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":172,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":174,"name":"Test Character 1750432376433","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":175,"name":"Iron Man #3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":176,"name":"Iron Man 5580fbb0-f402-4c30-8f00-9c9543cb5a6b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":178,"name":"Test Character 1750432464491","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":179,"name":"Test Character 1750432465100","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power "
11:20:32.092 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2"]},{"id":181,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":184,"name":"Test Character 1750432467117","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":185,"name":"Hulk","alterego":"No  Recuerdo","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":186,"name":"Loki","alterego":"Loki Laufeyson","description":"Dios del enga[0xc3][0xb1]o","powers":["Magia","Ilusi[0xc3][0xb3]n"]},{"id":187,"name":"Ghost Rider JC","alterego":"Ghost Rider JC","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":188,"name":"IronMan-4e1c6d16-e5ee-42d8-8337-49de7e644f2c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"
11:20:32.092 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ""id":189,"name":"Deadpool jusimban3","alterego":"Wade Winston Wilson","description":"Updated description","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":191,"name":"CasaPlus","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":192,"name":"Iron Man 2beed694-dc05-4dae-a2ca-5607f27bf28e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":193,"name":"BatMans 2025","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":194,"name":"Jose Obando 1750432629445","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":195,"name":"Test Character 1750432656836","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":196,"name":"Test Character 1750432657078","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":197,"nam"
11:20:32.092 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "e":"Test Character 1750432657714","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Pow[\r][\n]"
11:20:32.092 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.092 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "er 1","Test Power 2"]},{"id":198,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":200,"name":"Jose Obando 1750432659387","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":201,"name":"Test Character 1750432659614","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":202,"name":"Iron Man e0a94dac-e873-4970-bd09-b4203cd66860","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":203,"name":"Chema Venegas","alterego":"Jos[0xc3][0xa9] Maria Venegas","description":"Updated description","powers":["Armor","Flight"]},{"id":204,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":208,"name":"Iron Man 8aef9187-dfcf-4c54-92fe-e1833b0159e6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":209,"name":"Iron Man BP","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":210,"name":"Jose Obando 1750432762927","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":211,"name":"Gilgamesh FSN Unlimited Blades","alterego":"Emiya Shirou","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":212,"name":"Iron Man","alterego":"Tony Stark v1","description":"Updated description","powers":["Armor","Flight"]},{"id":213,"name":"Diego Iron Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":214,"name":"Iron Man 33145b49-a097-4c72-981e-4c57d9a5e88c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":215,"name":"Hulk ebbc0b5f-1969-403e-a742-67d590a463ae","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":216,"name":"Thor bc05acef-514d-4521-9c92-fc5bde2bbdd8","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":217,"name":"Capitan America 51f41353-8527-48a5-9048-1741d044680f","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":219,"name":"Jose Obando 1750432788774","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":220,"name":"Capitan America","alterego":"Cris","description":"Muy muy fuertote","powers":["Escudo"]},{"id":221,"name":"Prueba name","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":222,"name":"Spider-Man-7","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":225,"name":"Iron Man 1da9babc-0f1b-4ad5-a4e7-06c3c258c68a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":226,"name":"Jose Obando 1750432896081","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":227,"name":"Prueba name1","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":228,"name":"Iron Man6","alterego":"Tony Stark6","description":"Genius billionaire6","powers":["Armor6","Flight6"]},{"id":230,"name":"Iron Woman","alterego":"Tony Starker","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":231,"name":"Iron Man 3244c4dc-b252-4dad-8ca9-5832a0b47887","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":232,"name":"Hulk 965fef05-74b4-4eb7-b0db-05133f03b247","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":233,"name":"Thor 3ddb8a85-f427-4b58-ba84-8de2b7e501e4","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":234,"name":"Capitan America b95c1248-8deb-48ea-a31a-058efb0c257e","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":235,"name":"Jose Obando 1750432985709","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":237,"name":"Pedro Costa","alterego":"Pedrito Coco","description":"Un coste[0xc3][0xb1]o buena onda que le gusta la playa","powers":["Reir","Cantar","Bailar"]},{"id":238,"name":"Silvana Bentacourt","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":239,"name":"Iron Man100","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":240,"name":"Iron Man JZ","alterego":"Tony Stark JZ","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":241,"name":"Wolverine","alterego":"James Howlett","description":"Mutante con garras de adamantium y factor de curaci[0xc3][0xb3]n","powers":["Regeneraci[0xc3][0xb3]n","Garras de adamantium","Sentidos agudos","Longevidad"]},{"id":242,"name":"Iron Man JZZ","alterego":"Otro JZ","description":"Otro","powers":["Armor"]},{"id":243,"name":"Iron Man1900","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":244,"name":"hugo leon","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":246,"name":"Iron Man0","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":247,"name":"Iron Alexis","alterego":"Tony Alexis","description":"Genius billionaire soccer","powers":["Armor","Flight"]},{"id":248,"name":"Jose Obando 1750433080040","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":249,"name":"Iron Man abf120f1-71fc-4a6e-8458-603dd31e22c0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":250,"name":"Jose Obando 1750433097032","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":251,"name":"Iron Men","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":252,"name":"Silvana Bentacourt v1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":253,"name":"Test Character 1750433107277","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":254,"name":"Test Character 1750433107521","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":255,"name":"Test Character 1750433108172","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":256,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":258,"name":"Test Character 1750433110415","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":259,"name":"Anderson Morrillo DEV #","alterego":"Worst Automatizator ever","description":"updated description # 3cbc9b39-6821-47e7-8967-0b323215d9f5","powers":["JAVA","NET"]},{"id":260,"name":"uniqueName","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":261,"name":"Iron Man Infernal 1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":262,"name":"Iron Man1901","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":263,"name":"Accelerator","alterego":"Emiya Shirou ","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":265,"name":"IronMan-","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":266,"name":"Iron Man 20fe3893-3e5e-450b-a582-29e860e97061","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":267,"name":"Hulk d9c79414-8bed-4759-8490-d1626dd0baaa","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":268,"name":"Thor 98acbad0-52a4-41bf-9cfe-ff4e57f25317","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},"
11:20:32.092 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "{"id":269,"name":"Capitan America 159d7856-e8fc-409e-b072-e76f81547bc6","alterego":"Steve Rogers","description":"Updated d[\r][\n]"
11:20:32.092 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.092 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "escription","powers":["Shield","Leadership"]},{"id":271,"name":"Iron Mans","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":273,"name":"TestBP","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":275,"name":"IronFB-","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":277,"name":"Test Character 1750433288330","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":278,"name":"Test Character 1750433288565","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":279,"name":"Test Character 1750433289216","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":280,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":282,"name":"Test Character 1750433291431","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":283,"name":"Iron Man 43e885e6-1428-4f2e-a2c9-4d3760dfa719","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":284,"name":"Iron Mon","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":285,"name":"Iron 6","alterego":"Tony 6","description":"Genius billionaire6","powers":["Alto6"]},{"id":287,"name":"Thryion Lannister","alterego":"Emiya Shirou ","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":288,"name":"Iron Man c2cb5987-8855-46f0-b661-9006e15192c6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":289,"name":"Chris M","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":290,"name":"Iron Man23232","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":291,"name":"Super Hero Test 4746","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":292,"name":"Iron Max","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":295,"name":"Test Character 1750433506400","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":296,"name":"Test Character 1750433506630","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":297,"name":"Test Character 1750433507077","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":298,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":299,"name":"Iron Man 22","alterego":"Tony Stark 22","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":300,"name":"El pepe","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":302,"name":"Test Character 1750433509103","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":303,"name":"Iron Man1902","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":304,"name":"Super Hero Test ","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":305,"name":"IronFB-69d7a1a7-49f9-4cf8-8f24-04ede770aa36","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":308,"name":"Jose Obando 1750433570443","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":310,"name":"Iron Man1903","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":311,"name":"Black Widow","alterego":"Natasha Romanoff","description":"Esp[0xc3][0xad]a rusa","powers":["Combate","Espionaje"]},{"id":312,"name":"Thor","alterego":"Thor Odinson","description":"Dios del trueno","powers":["Control del rayo","Super fuerza","Mjolnir"]},{"id":313,"name":"Captain America","alterego":"Steve Rogers","description":"Super soldado","powers":["Super fuerza","Escudo de Vibranium"]},{"id":314,"name":"Spider-Man 113189","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":315,"name":"CohetePlus","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armor","Flight"]},{"id":318,"name":"Super Hero Test 123","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":319,"name":"Test Character 1750433582237","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":320,"name":"Test Character 1750433582455","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":321,"name":"Test Character 1750433583360","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":322,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":323,"name":"max versatapen","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":325,"name":"Test Character 1750433585661","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":326,"name":"Iron Man 0a790bc9-1ee6-41f5-8a31-706d23a56f87","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":328,"name":"Deadpool jusimban","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano[0xe2][0x80][0x8b][0xe2][0x80][0x8b] y antih[0xc3][0xa9]roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":329,"name":"Test Character 1750433618842","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":330,"name":"Test Character 1750433619055","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":331,"name":"Test Character 1750433619974","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":332,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":334,"name":"Test Character 1750433622270","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":335,"name":"GatunoNeptuno","alterego":"Naranjoso","description":"Crazy cat","powers":["Meow","Cry in desperation"]},{"id":336,"name":"Test Character 1750433629991","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":337,"name":"Test Character 1750433630210","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":338,"name":"Test Character 1750433630809","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":339,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":341,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":342,"name":"Iron Man tst","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":343,"name":"CohetePlus1","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":344,"name":"Iron Man God","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":347,"name":"Spider-Man1","alterego":"Peter Parker1","description":"Friendly neighborhood Spider-Ma"
11:20:32.097 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "n falso","powers":["Wall-crawling","Spider-sense"]},{"id":348,"name":"CasaPlus1","alterego":"Tony Stark","description":"Genius bil[\r][\n]"
11:20:32.097 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.097 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "lionaire","powers":["Armor","Flight"]},{"id":349,"name":"Test Character 1750433708796","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":350,"name":"Test Character 1750433709031","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":351,"name":"Test Character 1750433709482","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":352,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":354,"name":"Test Character 1750433710980","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":355,"name":"Iron Man Infernal Karate -e2462451-d7f9-4eb5-9502-2f202828f715","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":356,"name":"Test Character 1750433733222","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":357,"name":"Test Character 1750433733461","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":358,"name":"Test Character 1750433733906","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":359,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":361,"name":"Test Character 1750433735384","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":362,"name":"Jose Obando 1750433737747","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":363,"name":"Updated Franz Herman","alterego":"Max Verstappen","description":"piloto de F1","powers":["Armor","Flight"]},{"id":365,"name":"Deadpool jusimban2","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano[0xe2][0x80][0x8b][0xe2][0x80][0x8b] y antih[0xc3][0xa9]roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":366,"name":"Iron Man Superior","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":367,"name":"Test Character 1750433753944","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":368,"name":"Test Character 1750433754176","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":369,"name":"Test Character 1750433754632","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":370,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":372,"name":"Test Character 1750433756102","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":373,"name":"Iron Man d53f8847-99c4-4496-a60d-7fb3e7c9c9a9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":374,"name":"Iron Man 4711","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":375,"name":"Test Character 1750433774349","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":376,"name":"Iron Manchs","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":377,"name":"Test Character 1750433774586","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":378,"name":"Test Character 1750433775033","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":379,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":381,"name":"Test Character 1750433776511","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":382,"name":"Iron Man1904","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":383,"name":"Deadpool jusimban3","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano[0xe2][0x80][0x8b][0xe2][0x80][0x8b] y antih[0xc3][0xa9]roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":384,"name":"CohetePlus2","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":385,"name":"Jose Obando 1750433795597","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":386,"name":"Iron Man 2e68e284-dd9d-4435-80b2-6481d8e5bac8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":387,"name":"Iron Man Infernal Karate -5ba06ebc-c345-4fce-98d3-59ef4568efce","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":388,"name":"Test Character 1750433797315","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":389,"name":"Test Character 1750433797554","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":390,"name":"Test Character 1750433798007","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":391,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":393,"name":"Test Character 1750433799483","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":394,"name":"Iron Man tst2","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":395,"name":"Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":396,"name":"Iron Man TestBP","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":398,"name":"Diego2 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":399,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":401,"name":"Test Character 1750433836144","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":402,"name":"Test Character 1750433836374","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":403,"name":"Test Character 1750433836808","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":404,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":406,"name":"Test Character 1750433838281","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":407,"name":"Test Character 1750433845402","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":408,"name":"Test Character 1750433845637","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":409,"name":"Test Character 1750433846080","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":410,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":411,"name":"Spider-Man1-cb88af9d-9e1d-4965-9a89-77df954d9e16","alterego":"Peter Parker1","description":"Friendly neighborhood Spider-Man falso","powers":["Wall-crawling","Spider-sense"]},{"id":413,"name":"Test Character 1750433847614","alterego":"Test Alt"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "er Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":414,"name":"CohetePlus3","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":415,"name":"Spiderman Test Karate","alterego":"Peter Parker","description":"H[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["ag[\r][\n]"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "ilidad","sentido ar[0xc3][0xa1]cnido","trepar paredes"]},{"id":416,"name":"Test Character 1750433855427","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":417,"name":"Iron Manchss","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":418,"name":"Test Character 1750433855662","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":419,"name":"Test Character 1750433856281","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":420,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":422,"name":"Test Character 1750433858961","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":423,"name":"ACC","alterego":"AGCC","description":"Genius billionaire and philanthropist","powers":["Armor","Flight"]},{"id":424,"name":"Iron Man Infernal Karate -1e7b39d2-3f63-4df9-8c8b-a8"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "122365e368","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":425,"name":"Iron Man 498db3a1-beab-43c9-993c-306b2f6eac11","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":426,"name":"Iron Man1905","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":428,"name":"Anderson Morrillo DEV # 54ce83f6-bbcb-4137-bffe-78aefa52fe40","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":429,"name":"IronFbb5a60f02-3e76-4d54-8277-5e0841ef8b8f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":430,"name":"Iron Man66","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":432,"name":"Test Character 1750433899423","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":433,"name":"Test Character 1750433899666","alterego":"Test Alter Ego","descriptio"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "n":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":434,"name":"Test Character 1750433900743","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":435,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":437,"name":"Test Character 1750433903439","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":438,"name":"Carmita","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":439,"name":"Iron Man1906","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":440,"name":"Anderson Morrillo DEV # 3969a194-06d5-49a9-9092-733f4e1c8281","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":441,"name":"Ghost Rider JC Updated","alterego":"Ghost Rider JC Updated","description":"Demon Updated","powers":["Fire","Punish"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "ing gaze"]},{"id":442,"name":"Jose Obando 1750433957284","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":443,"name":"Iron Man Rafael","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":444,"name":"Iron Marco","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":446,"name":"Javier Simbana","alterego":"All","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":448,"name":"Iron Man a63bcaa0-8085-4566-b0cf-8f5e1b0c5c6c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":449,"name":"Iron Man 7631688d","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":450,"name":"Iron Man eb0e8d97","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":4"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "51,"name":"Iron Man cb1b3f87","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":452,"name":"Iron Man 1df3c71a","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":453,"name":"Green Goblin","alterego":"Ned","description":"Student","powers":["Armor","Flight"]},{"id":454,"name":"Diana1750433951","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":455,"name":"Iron Man Infernal Karate -41787326-1671-4354-95fb-5b06971d3883","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":458,"name":"Iron Man Test","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":459,"name":"Iron Man 4678f266-a460-48f1-ae8e-d927dad2bd16","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "},{"id":460,"name":"Iron Man #(randomNum)","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":461,"name":"Alexis Name 3 Updated","alterego":"Alexis Alterego 3 Updated","description":"Alexis Description 3 Updated","powers":["Armor","Flight"]},{"id":463,"name":"Iron Man1907","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":464,"name":"Spider-Man-fda525ee-03b4-4a9a-bac2-b5b69f49e7a3","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":465,"name":"spiderman.name","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":466,"name":"IronFb57bd5b58-ae3d-4373-acfa-2919bd800e0e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":467,"name":"Iron Man b6d81","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":468,"name":"Javier Simbana 1","alterego":"All jsi","description":"Superpower","powers":["Tel"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "etransportacion","Jugar futbol"]},{"id":469,"name":"Iron Man4","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":470,"name":"Bob1750434058","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":471,"name":"IronMan_072abe9d-e0a2-4650-88bf-273284a64666","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":472,"name":"Chris M1","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":473,"name":"Iron Man 4c592141-80e1-4206-9a8b-06c0bcc1b363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":474,"name":"Green Goblin 2","alterego":"Ned","description":"Student","powers":["Armor","Flight"]},{"id":475,"name":"Iron Man1908","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":476,"name":"Iron Man 56","alterego":"Tony Stark","description":"Genius billionaire","power"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "s":["Armor","Flight"]},{"id":478,"name":"Iron Man tst23","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":479,"name":"Iron Man Infernal Karate -b4bb865d-a131-4ddd-b275-d6a0554308a5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":481,"name":"Iron Mansanchez","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":482,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":483,"name":"Character-ef2c4b87","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":484,"name":"Character-e9d66f0e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":485,"name":"Character-ad7b4a88","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight""
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "[\r][\n]"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.193 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "]},{"id":486,"name":"Character-ac632283","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":487,"name":"IronFba388ed7d-d28b-4d08-b9c2-6834d477af00","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":488,"name":"Iron Man9","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":490,"name":"Iron Man 91e6d9ac","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":491,"name":"Iron Man 0f671a8a","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":492,"name":"Iron Man 35a2388e","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":493,"name":"Iron Man 32ebadfa","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":494,"name":"Anderson Morrillo DEV # aee869ff-edc7-4235-96a3-a3bd18fe402a","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":495,"name":"Anderson Morrillo DEV #","alterego":"Worst Automatizator ever","description":"El Dev Humilde","
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ""powers":["JAVA","NET"]},{"id":497,"name":"Iron Man 5a56b4d8","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":498,"name":"Iron Man 2f038a75","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":499,"name":"Iron Man 5454745d","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":500,"name":"Iron Man f614f678","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":501,"name":"Iron Man 80","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":502,"name":"Charlie1750434173","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":504,"name":"Super Madre","alterego""
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ":"Luz Toaquiza","description":"Puede hacer varias cosas","powers":["Amor","Comprensi[0xc3][0xb3]n"]},{"id":505,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":506,"name":"Captain America 1750434216603","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":507,"name":"Hulk Supremo 1723463053 1750434217197","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":508,"name":"Black Widow 1750434217635","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":509,"name":"Iron Man tst233","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":510,"name":"Thor 1750434218264","al"
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "terego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":511,"name":"Captain America 1750434218953","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":512,"name":"Spider-Man-02368906-8b2b-4e16-80b0-71dd5d2f5c4d","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":513,"name":"Iron Man 7fc9b5b3-d7c2-462b-a1ee-116cef0932da","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":514,"name":"Anderson Morrillo DEV # ef460b18-ae1c-4e5e-8757-f0eb0a32ede8","alterego":"Worst Autom"
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "atizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":516,"name":"Chris Muyon xd","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":517,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":518,"name":"Iron Man1909","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":519,"name":"Iron Man58","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":520,"name":"Ironasdsadsa Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":521,"name":"Iron Man 9619","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":523,"name":"Iron Man 3378","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":524,"name":"Iron Man 5092","alterego":"Tony Stark","descri"
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "ption":"Genius billionaire","powers":["Armor","Flight"]},{"id":525,"name":"Iron Man 563","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":526,"name":"Iron Man 2753","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":527,"name":"Iron Man 202","alterego":"Tony Stark","description":"Genius billionaire""
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ","powers":["Armor","Flight"]},{"id":529,"name":"Iron Man 9862","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":530,"name":"the winter soldier","alterego":"Stalin Condolo","description":"Un soldado del invierno","powers":["Brazo de hierro","metralladora"]},{"id":531,"name":"Iron ManSanchez2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":532,"name":"Jose Obando 1750434296881","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":533,"name":"Sonic-27e58e7b-aee1-43d5-b47f-31b79ab9ef7a","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":534,"name":"Iron Man 9ce51371-d1a9-4d09-9549-f286b5e8dc82","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":536,"name":"Silvana Bentacourt v1-1750434339544","alterego":"Tony Stark","description":"Genius billionaire","powers":["Arm"
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "or","Flight"]},{"id":537,"name":"Personaje actualizado-1750434343376","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":539,"name":"Iron Man Superior-794","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":540,"name":"Hero_eb7fb2b3-489f-435d-8977-06daf4295252","alte"
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "rego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":541,"name":"Hero_98d318cb-59d0-4154-9032-ebe5943ae31a","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":542,"name":"Iron Man TestBP1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":543,"name":"Iron Man 18ca4000-009f-4d19-9c87-fc0de9768e13","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":545,"name":"Alexis Name 2 Updated","alterego":"Alexis Alterego 2 Updated","description":"Alexis Description 2 Updated","powers":["Armor","Flight"]},{"id":546,"name":"Iron Man1910","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":547,"name":"Alexis Name 3","alterego":" Alexis Alterego 3","description":" Alexis Description 3","powers":["Armor","Flight"]},{"id":550,"name":"nombreCreate","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":551,"name":"Character","al"
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "terego":"Hero","description":"A character","powers":["strength"]},{"id":552,"name":"Jose Obando 1750434393499","alterego":"Tony Stark","description":"Genius billionai[\r][\n]"
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "re","powers":["Armor","Flight"]},{"id":553,"name":"Ver[0xc3][0xb3]nica Vicente","alterego":"Tony Stark","description":"Software engineer and superhero enthusiast","powers":["Armor","Flight"]},{"id":554,"name":"jchuldeb","alt"
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "erego":"Fernando Chulde","description":"Editar descripci[0xc3][0xb3]n","powers":["Armor","Flight"]},{"id":555,"name":"Iron Man 1750434398028","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":556,"name":"Iron Man Test3 1750434398378","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":557,"name":"Iron Man Test5 1750434399272","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":558,"name":"Iron Man Test7 1750434400132","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":560,"name":"Spider-Man Test11 1750434402397","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":561,"name":"Captain America Test11 1750434402397","alterego":"Steve Rogers","description":"S[0xc3][0xba]per soldado","powers":["Fuerza","Escudo","Liderazgo"]},{"id":563,"name":"IronMan-1f93da34-ad9a-4dfa-bb94-45ae015cb268","al"
11:20:32.196 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "terego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":564,"name":"Iron Man1911","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":565,"name":"Iron Man 9597c7ae-c86a-4a19-8070-00c9aeabd823","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":566,"name":"Iron Man aa6"
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "0b152-bc11-4c5f-8de9-7db12708385b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":567,"name":"Iron Maiden 3","alterego":"Tony Mayor","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":568,"name":"Iron Marco1","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":569,"name":"Iron Man-3a282d5c-35e9-4f74-94f4-22d383a00024","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":570,"name":"Iron Man 982e99df-678a-47e0-88fa-637de0b6d649","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":571,"name":"XIron ManX","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":572,"name":"Iron Man 16897711","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":573,"name":"Iron Man 83ed4d75","alterego":"Tony Stark""
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":574,"name":"Iron Man 3904c383","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":575,"name":"Iron Man abf03b68","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":577,"name":"Spider-Man-5e6c5350-ad12-41f5-9358-687c73bd9279","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":579,"name":"milmoral1","alterego":"Tony Stark-milmoral1","description":"Updated description","powers":["Armor","Flight"]},{"id":580,"name":"Iron Man 63","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":581,"name":"Iron Man 4731","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":"
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "582,"name":"Iron Man 2233","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":583,"name":"Iron Man 363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":584,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":585,"name":"Iron Man 8265","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":588,"name":"Black Widow TestChapter","alterego":"Natasha Romanoff","description":"Brave women","powers":["Guns","Fight"]},{"id":591,"name":"Iron Marck","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":592,"name":"Chris Muyon 42146","alterego":"Christia"
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "n Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":594,"name":"Capitan America Negrito 2","alterego":"Un nombre Random","description":"Personaje para prueba temporal","powers":["Red","Blue"]},{"id":595,"name":"Iron Man 30865d8b-f4d1-4d3a-8da9-61065a3d9e1b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":597,"name":"Iron Man 1195","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":598,"name":"Iron Man 2555","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":599,"name":"Iron Man 226","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":600,"name":"Iron Man 3826","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":602,"name":"Iron Man 2839","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":605,"name":"Kramerx""
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ","alterego":"Updated Hero","description":"Updated description","powers":["updated power"]},{"id":606,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":607,"name":"I2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":608,"name":"Silvana Bentacourt v1-1750434549919","alterego":"Ton"
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "y Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":609,"name":"Jose Castle","alterego":"Super Pichincha","description":"Genius Developer","powers":["Armor","Flight","Super Strength","Intelligence"]},{"id":610,"name":"Chris Muyon 23952","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":611,"name":"jose","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":613,"name":"Iron Man-1e2ab87a-d0d2-4656-913a-c4279d3bfa6f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":614,"name":"Iron Man 5d59a582-166c-4720-b20d-cec95d9982f0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":615,"name":"Jose Obando 1750434583471","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":616,"name":"milmoral2","alterego":"Tony Stark","description":"Genius billionaire","powers"
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "":["Armor","Flight"]},{"id":617,"name":"milmoral3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":618,"name":"Iron Man Superior-4235","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":621,"name":"Iron Man v2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":623,"name":"IronMan-e279bc88-b3e5-4731-9a82-0fbce36ad6e3","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":624,"name":"Test Character 1750434618","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":627,"name":"CohetePlus6","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":629,"name":"Spider-Man-New","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":630,"nam"
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "e":"Captain America 1750434654993","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":631,"name":"Hulk Supremo 1723463053 1750434655581","alterego":"Bruce Banner","descr[\r][\n]"
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "iption":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":632,"name":"Black Widow 1750434655839","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":633,"name":"Thor 1750434656329","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength""
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "]},{"id":634,"name":"Captain America 1750434656777","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":635,"name":"Iron Man dea5b9c1-049a-4cc7-93b0-f46351816106","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":636,"name":"Iron Man fd4eebef-5bc2-440d-aaab-761cf21cfb05","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":637,"name":"Iron Marck10","alterego":"Marco Jativa","description":"Genius Multi billionaire","powers":["Armor","Flight"]},{"id":641,"name":"Iron Man-e60af0ac-255a-4fe3-bfb4-438b4aa31007","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":642,"name":"Iron Man Superior-3419","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":643,"name":"Iron Man","alterego":"Tony Stark","description":""
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Updated description","powers":["Armor","Flight"]},{"id":645,"name":"IronFbb697fe07-575a-4809-be2c-5a8ca55a9e42","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":646,"name":"Silvana Bentacourt v1-1750434702372","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":649,"name":"HeroeConsulta_5dc7aabc-c03f"
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "-48f8-a0c5-dcac3b97293c","alterego":"AlteregoConsulta","description":"Consulta","powers":["Consulta"]},{"id":651,"name":"Hero_5bc6275a-7bcd-4c58-8c4d-e5b5ffa7e8ca","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":652,"name":"Hero_f5cfbdf0-c152-402f-8af1-13f5843bfe6f","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":653,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":654,"name":"Vision Woman 221b89","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":655,"name":"anamcias","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":657,"name":"Captain America 1750434732444","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":658,"name":"Hulk 1750434733011","alterego":"Bruce Banner","description":"Sc"
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "ientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":659,"name":"Black Widow 1750434733259","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":660,"name":"Thor 1750434733714","alterego":"Thor Odinson","description":""
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":661,"name":"Captain America 1750434734194","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":662,"name":"Silvana Bentacourt v1-1750434738344","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":663,"name":"Black Panther","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","Tecnolog[0xc3][0xad]a"]},{"id":664,"name":"Thanor","alterego":"Jack Doson","description":"Genius Power","powers":["Armor","Flight"]},{"id":665,"name":"Iron Man Test 1750434749684","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":666,"name":"Iron Man-ca8ae162-fa01-4994-97a8-b917491af703","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":668,"name":"Blue Marvel","alterego":"Ad[0xc3][0xa1]n Bernard Brashear","
11:20:32.198 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ""description":"Cientifico","powers":["living reactor"]},{"id":669,"name":"Iron Man Superior-8548","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":670,"name":"JaHcOiADzl","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":671,"name":"IronMan-1ef5b5f9-7c9c-4fe1-b28b-6762"
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "a589fe27","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":672,"name":"Iron Man 8ad91d8d-f4ae-4470-a041-dbbc9fc9291d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":673,"name":"Carlos Arcentales","alterego":"Developer","description":"Computer 24/7","powers":["Sitting all day"]},{"id":674,"name":"Spider-Man Test NN","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":675,"name":"andres calamaro","alterego":"calamardo","description":"cantante","powers":["aaaa","Flibbbbbght"]},{"id":676,"name":"Sonic-f30f3f75-0ae5-47b5-9cf2-65616ca4502b","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":678,"name":"CohetePlus4","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":679,"name":"Anderson Morrillo DEV # 06c29da9-e789-4ed0-"
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "896d-9b703fd82b39","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":680,"name":"Iron Man d06400bc-3bbf-48eb-89e5-32ab928e76b7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":681,"name":"Iron Marck11","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":682,"name":"Spider-Man-New-1","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":683,"name":"Anderson Morrillo DEV # 7fe66a00-8ffd-4853-9c96-a274c6067884","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":684,"name":"Iron Man Superior-7098","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":688,"name":"Sonic-bf563f0f-fb4b-4254-8cf8-0ab44728b0c8","alterego":"Super sonico","description":"Erizo azul con super velocidad""
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ","powers":["velocidad","agilidad","resistencia"]},{"id":689,"name":"Silver surfer","alterego":"Silver","description":"Humanoid Alien","powers":["volar","fuerza"]},{"id":690,"name":"I2_73a3f8a4-94ff-4ff2-8a56-a4132bca6948","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":691,"name":"Iron Man1913","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":692,"name":"Jose Obando 1750434857758","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":693,"name":"Anderson Morrillo DEV # a8d0f72e-508f-4c00-afc1-0d416e911fec","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":695,"name":"Iron Man-1750434870231","alterego":"Tony Stark","description":"Updated description 1750434871868","powers":["Armor","Flight"]},{"id":696,"name":"Iron Man-1750434873814","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":"
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "697,"name":"Wonder Lord 45cc01","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":698,"name":"Iron Man-1750434877435","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":699,"name":"\"; DROP TABLE characters; --","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"i[\r][\n]"
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "d":701,"name":"Iron Man Infernal Karate -c83db201-9f36-4ffa-8b65-69cf1ed417fd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":702,"name":"Iron Man 1750434916663","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":703,"name":"CohetePlus7","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":705,"name":"Iron Man 71cc6bdc","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":706,"name":"Iron Man abc73c30","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":708,"name":"Iron Man 10b8e6d2","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":709,"name":"Spider-Man-fi","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":710,"name":"Iron Man 7ebf883d-acd4-49ab-90f9-80925b6eb69c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":711,"name":"Captain Strange bbd0f3","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":712,"name":"Castleman","alterego":"Super castle","description":"Genius Dev","powers":["dev","qa"]},{"id":713,"name":"dSAROzEjqI","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":714,"name":"Iron Man_ebde376d-72ed-44a9-80e7-3c09ac314089","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":715,"name":"Iron Marck13","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":716,"name":"Iron Man 1750434961700","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":717,"name":"Iron Man Superior-2063","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":719,"name":"I2_73a3f8a4-94ff-4ff2-8a56-a4132bca6949","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":720,"name":"Iron Man Test Armando","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":721,"name":"ErrorServer500","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":722,"name":"Iron Man Test 1750434992629","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":723,"name":"Carlos Arcentales1","alterego":"Developer","description":"Computer 24/7","powers":["Sitting all day"]},{"id":724,"name":"Jose Obando ","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":727,"name":"HeroeConsulta_b10afd73-0a3b-4109-bddc-85b3cc8075a7","alterego":"AlteregoConsulta","description":"Consulta","powers":["Consulta"]},{"id":728,"name":"Hero_a6ddccea-e0b1-44a9-a3ca-71e19ebb4ee5","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":729,"name":"Hero_17ea9470-e103-4144-a4ca-000ff8bcde5f","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":731,"name":"Test Character 1750435001668","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":732,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":733,"name":"Test Character 1750435001909","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":735,"name":"Test Character 1750435002972","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":736,"name":"Iron Man-1750435002424","alterego":"Tony Stark","description":"Updated description 1750435003911","powers":["Armor","Flight"]},{"id":737,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":739,"name":"Test Character 1750435005711","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":740,"name":"Iron Man d79feef5-ee40-47d4-a3e0-ce8335d60fb6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":741,"name":"Super Hero Test 4181","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":742,"name":"Iron Man-1750435005758","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":743,"name":"Jose Obando 1750435006315","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":744,"name":"UIFLGPKgwd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":745,"name":"Super Hero Test 9203","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":746,"name":"Black Widow e0cecd","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":747,"name":"Iron Man-1750435009457","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":749,"name":"Iron Man ac65cd4e-f8ee-4e20-af62-807e7c6438cf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":750,"name":"Chris Muyon 91518","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":751,"name":"kramerx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":753,"name":"Capitan America Negrito 3","alterego":"Un nombre Random para el negrito 3","description":"Personaje para prueba temporal No me borren porfas","powers":["Red","Blue"]},{"id":754,"name":"Spiderman","alterego":"Peter Parker","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":755,"name":"Iron Manson","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":756,"name":"Iron Man Infernal Karate -d1835d5f-3cbd-43e6-bd76-dc54277ae3d1","alterego":""
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":757,"name":"Thor aaf428f9-7f59-4314-b8dd-b2c8285ef0c4","alterego":"Thor","description":"Dios del trueno,","powers":["Speed","Strength"]},{"id":758,"name":"Iron Man Superior-7283-105634","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":760,"name":"Iron Man 04f157cd-fed9-42db-8154-452dfee7878c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":762,"name":"Test Character 1750435051243","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":763,"name":"Test Character 1750435051489","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":764,"name":"Test Character 1750435052509","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":765,"name":"Iron Man","alt"
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "erego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":766,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":768,"name":"Test Character 1750435055188","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":769,"name":"Iron Man 17504350"
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "54915","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":770,"name":"I2_af1ef636-6b7a-4753-9c3c-3193eddc46ce","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":771,"name":"Iron Man ebbcd79c-585d-4589-a191-41738c3092dd","alterego":"Tony Stark","description":"Genius billionaire","p[\r][\n]"
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "owers":["Armor","Flight"]},{"id":772,"name":"Spider Boby 2","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":773,"name":"Iron Man-8448985f-b485-41e9-a251-30c84c558927","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":774,"name":"Iron Man-1750435078065","alterego":"Tony Stark","description":"Updated description 1750435079527","powers":["Armor","Flight"]},{"id":775,"name":"Vision Panther a27469","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":776,"name":"Iron Man-1750435081593","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":777,"name":"Silvana Bentacourt v1-1750435076039","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":778,"name":"Jose Obando 1750435083490","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":779,"name":"Iron Man-1750435085457","alterego":"Tony"
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << " Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":781,"name":"IronFb60a86288-3a35-4318-8c1e-073df5c90941","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":782,"name":"Iron Man_4238bc3a-d63a-42d6-8efd-4bfe2dad81d5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":783,"name":"Iron Man Test 1750435097303","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":784,"name":"Ghost Rider JC2","alterego":"Ghost Rider JC2","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":786,"name":"Jose Obando 1750435106152","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":787,"name":"Test Character 1750435106752","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":788,"name":"Test Character 1750435106996","alterego":"Test Alter Ego","description":"Test Description""
11:20:32.203 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ","powers":["Test Power 1","Test Power 2"]},{"id":789,"name":"Test Character 1750435108042","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":790,"name":"Super Hero Test 9086","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":791,"nam"
11:20:32.206 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "e":"Spider Boby 3","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":792,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":793,"name":"IronMan-126b29a8-0b98-4414-9242-f2b3202ad522","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":794,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":796,"name":"Test Character 1750435110732","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":798,"name":"Bryan Carrillo","alterego":"bcarrill","description":"Test","powers":["Armor","Flight"]},{"id":799,"name":"IronFbabe5eb93-b119-4003-aa3b-e4ae1f7b35f3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":800,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":802,"name":""
11:20:32.206 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Captain America 1750435170454","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":803,"name":"Hulk 1750435171053","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durabilit"
11:20:32.206 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "y"]},{"id":804,"name":"Black Widow 1750435171297","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":805,"name":"Thor 1750435171760","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":806,"name":"Captain America 1750435172222","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":807,"name":"Test Character 1750435187058","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":808,"name":"Test Character 1750435187307","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":809,"name":"Test Character 1750435188383","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id"
11:20:32.206 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "":810,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":812,"name":"Test Character 1750435191161","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":813,"name":"Sonic-84ccc118-4255-43fe-b0df-aa0aa7e2030f","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":814,"name":"Franky","alterego":"Frank  G[0xc3][0xb3]mez","description":"Genius Power","powers":["Dev","soft-skills"]},{"id":815,"name":"Iron Man ca034017-2379-40d2-9abd-b3c4ebd65e3d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":816,"name":"Iron Man1915","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":817,"name":"Test Character 1750435202583","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":818,"name":"Test Character 17504"
11:20:32.206 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "35202829","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":819,"name":"Test Character 1750435203924","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":820,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":822,"name":"Test Character 1750435206724","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":823,"name":"Test Character 1750435219684","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":824,"name":"Test Character 1750435219930","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":825,"name":"Test Character 1750435221013","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":826,"name":"Iron Man","alterego":"
11:20:32.206 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ""Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":828,"name":"IronMan-93bc5862-b995-4936-a2af-6fc972ea6781","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":829,"name":"Test Character 1750435223803","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":831,"name":"Iron Man 7721ce9c-78ee-4e05-ba5a-60e804794866","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":832,"name":"Sonic-d82cc6b3-cf99-4ba1-8f74-565a3d43d021","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":833,"name":"chleona","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":834,"name":"Edulima","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":835,"name":"Captain America 1750435236281","alterego":"Steve Rogers","d"
11:20:32.206 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "escription":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":836,"name":"Hulk 1750435236908","alterego":"Bruce Banner","description":"Scientist with the ability to tra[\r][\n]"
11:20:32.206 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.207 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "nsform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":837,"name":"Black Widow 1750435237144","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":838,"name":"Thor 1750435237605","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":839,"name":"Captain America 1750435238033","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":840,"name":"Iron Man_R1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":841,"name":"Doctor Woman 3ba7c0","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":842,"name":"Edulima 1","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":843,"name":"Franky2 G[0xc3][0xb3]mez C","alterego":"Frank  G[0xc3][0xb3]mez 2","description":"Foundation Power","powers":["Dev","soft-skills","QA"]},{"id":844,"name":"Rein Batman","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":845,"name":"Iron Man 3281ece1-88b7-4831-8871-d15bcc2f324c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":846,"name":"Test Character 1750435267087","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":847,"name":"Test Character 1750435267352","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":848,"name":"Test Character 1750435268438","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":849,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":851,"name":"Test Character 1750435271239","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":852,"name":"Iron Maidens","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":854,"name":"Iron Man Rafael6yysg6ot","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":855,"name":"Juanceva","alterego":"Juan Carlos Cevallos","description":"A superhero with new abilitios of fast flight and enhanced armor.","powers":["Armor","Flight"]},{"id":856,"name":"Iron Man Rafael5nbh0li3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":857,"name":"iMaMgUYCAQ","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":858,"name":"Iront Man tstttttt","alterego":"Tony Stark tst4","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":859,"name":"CHAPULIN COLORADO","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":861,"name":"Iron Man 11223","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":863,"name":"Sonic-2096ccde-28e7-4c6e-b795-dc18b7c693f1","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":864,"name":"Iron Man-5e71719b-7c06-4e73-abd7-895d8d16ee1c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":865,"name":"Rein Batman 1","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":866,"name":"Iron Man #9015","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":867,"name":"Prueba Pichincha0dcd3e56-9121-4274-bbe9-3cd421c4e7a7781","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":868,"name":"Black America b95dfc","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":869,"name":"Iron Man 1750435332795","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":870,"name":"Iron Man #2090","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":871,"name":"Iron Man 1750435334408","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":873,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":874,"name":"Iron Man Rafaelps49a20y","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":875,"name":"IronMan-e9dc335f-2cb5-4994-b31b-b45479436c30","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":876,"name":"Iron Man Infernal Karate -1b349934-1c76-4789-93ed-86df94b3bab6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":877,"name":"Super Hero Test 500","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":878,"name":"1Iron Man_r1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":879,"name":"Iron Man Infernal Karate -5dbe5bd6-1ad7-4c94-91f2-53b8e16f3080","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":880,"name":"Super Hero Test 1069","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":881,"name":"Iron Man Rafael6y96my8l","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":882,"name":"Iron Man f6e38507-5f82-49ef-95c3-8e3b4cab62eb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":883,"name":"Iron Man e75d7000-77dd-4ddc-acfd-f64ecaf5b277","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":884,"name":"Iron Man f168694c-c735-4e5d-a858-a741c71a5b33","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":885,"name":"Iron Man ee9f8afc-2391-4396-b7b6-7b9135876080","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":886,"name":"Iron Man e24e3542-c156-4d4e-a6e6-4c7a3bbfe9ce","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":887,"name":"Iron Man 89f5ee02-debd-4ea9-bcf7-90527151df4f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":888,"name":"Iron Man f62165cd-b4f6-4f1d-a4f8-d9ba01fb3854","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":889,"name":"Iron Man effa79f7-455e-47ac-97fc-248c"
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "26e51f84","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":890,"name":"Iron Man dc193517-a24d-4c48-8404-78a6ef9ac947","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":892,"name":"Iron Man_c8c4114f-954a-4157-b3d6-1f96d47000c0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":894,"name":"I2_5a9b1ce5-1928-4df3-9a33-6feff687d6be","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":895,"name":"Iron Marck14","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":897,"name":"2Iron Man_R1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":898,"name":"Captain America 1750435378758","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":899,"name":""
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Hulk 1750435379415","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":900,"name":"Iron Man 77645[\r][\n]"
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "bb2-47c6-46da-95c8-2f7bbb3cd427","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":901,"name":"Nuevo Personaje #2088","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":902,"name":"Black Widow 1750435381094","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":903,"name":"Thor 1750435382825","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":904,"name":"Thors","alterego":"Rayo Man","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":905,"name":"Captain America 1750435384507","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":907,"name":"CohetePlus8","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":908,"name":"Prueba Pichinchaf6587085-7bb9-4ede-9697-0210ca87ac471007","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":909,"name":"Prueba Pichincha3c2bd79a-9c44-44f2-95e7-ff2489e2076d9887","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":910,"name":"Super Hero Test 8635","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":911,"name":"Super Hero Test 8202","alterego":"Cristian Rui"
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "z","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":912,"name":"2Iron Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":913,"name":"Iron Man Infernal Karate -55a18ae7-63dd-495e-a816-d69d36054423","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":914,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":916,"name":"CAPULINA","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":917,"name":"Thors2","alterego":"Rayo Man","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":918,"name":"CohetePlus5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":919,"name":"Hulk2","alterego":"Si Recuerdo","description":"Updated Description","powers":["Armor","Flight"]},{"id":920,"name":"Iron Man Test 1750435448017","alterego":"Tony Stark""
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":922,"name":"Diego1 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":923,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":924,"name":"Iron Man f334567c-af75-47cf-88bc-036551"
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "b99974","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":925,"name":"Iron Man 3a122aeb-0fd7-4e7e-a411-0e0c94a668eb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":926,"name":"Iron Man 82830233-5a04-4d58-9267-aaa9e5c0187c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":927,"name":"Iron Man f38e92b0-5ea3-4b5b-8e84-9a1fc2dc4409","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":928,"name":"Iron Man 569c2346-df86-46e9-8ca4-491fbee99fbf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":929,"name":"Iron Man 6ce4dd6e-0bb8-4e29-8a99-f16a999838d2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":930,"name":"Iron Man eaac79c8-540c-4fe0-9b82-ea916bad1088","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":931,"
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ""name":"Iron Man 80ddece7-2c23-4570-8679-62bd36e4a0fe","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":932,"name":"Iron Man 269a2031-06df-4f74-a80e-862231ca277f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":934,"name":"Iron Man Rafaeldcollyfk","alterego":"Tony Stark","description":"Genius bil"
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "lionaire","powers":["Armor","Flight"]},{"id":935,"name":"I2_1e9986da-8cce-4898-beba-ec3248e46508","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":938,"name":"Anderson Morrillo DEV # a15932ce-0317-402b-bcfa-895b16dd4d19","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":939,"name":"Iron Man Duplicate 1750435476808","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":940,"name":"Spider-Man 426","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido ar[0xc3][0xa1]cnido","Trepar paredes","Lanzar telara[0xc3][0xb1]as"]},{"id":941,"name":"Spider-Man 362","alterego":"Otro","description":"Otro","powers":["Sentido ar[0xc3][0xa1]cnido"]},{"id":942,"name":"CohetePlus9","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":944,"name":"Iron Man Test 1750435503409","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":945,"name""
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ":"Laly","alterego":"Gladys Ronquillo","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":946,"name":"Iron Man v23","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":947,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":948,"name":"Rein Batman be527396-34e6-473"
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "3-bcb3-7f4e575e94e8","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":949,"name":"CohetePlus9","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":950,"name":"Iron Man 857abe15-57b3-4061-9b8b-2926081f3688","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":951,"name":"Iron Man 2ef32151-1370-468f-8635-422d69d5db81","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":952,"name":"Iron Man 3700e2fb-6099-454d-acdd-4112cd6dd972","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":953,"name":"Iron Man 5048f434-9232-44e9-aa53-95aa122880a1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":954,"name":"Iron Man 87ba32a7-1465-4037-9383-05dee9d20fe6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":955,"name":""
11:20:32.293 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Iron Man 2cfc22cf-00fe-42af-ae3a-3541e6ccee6f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":956,"name":"Iron Man def5622c-993c-4ed9-ad7a-0c9e2a67e5f3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":957,"name":"Iron Man e1929de8-92e8-4819-ac53-de723c2fb1c7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":958,"name":"Iron Man 600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":959,"name":"Iron Man 884","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":960,"name":"Iron Man 122","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":961,"name":"Iron Man 790","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":962,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor""
11:20:32.300 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ","Flight"]},{"id":963,"name":"Nombre-25774c23-7a4d-4c00-98b8-d1b1e991ffcb","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":964,"name":"Iron Man 255","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":965,"name":"Silvana Bentacou[\r][\n]"
11:20:32.300 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.300 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "rt v1-1750435519164","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":967,"name":"Iron Man 572","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":969,"name":"Iron Man 77f92d27-108f-4b11-bb40-e8404bdcb55c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":970,"name":"Nuevo Personaje #1143","alterego":"
11:20:32.300 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ""Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":971,"name":"Prueba Pichincha872bfa00-6f0f-426a-adc1-87687a9a5d4a256","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":972,"name":"Prueba Pichinchae131f0c1-b584-47c5-af37-2b68d033c2ec6690","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":973,"name":"Castleman_1","alterego":"Super castle_1","description":"Genius Dev_1","powers":["dev_1","qa_1"]},{"id":974,"name":"Anderson Morrillo DEV # 3c3f54e0-4c47-4a80-887d-f59b0a7a514f","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":975,"name":"CapitanAmerica001","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":976,"name":"Rein Batman 769fa36c-5dc2-47ea-a2bf-b1ad4c67b8ee","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":977,"name":"Anderson Morrillo DEV # f1feca28-dc56-416c-b8f5-a61f9fe0dbe"
11:20:32.301 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "8","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":978,"name":"Super Hero Test 2617","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":979,"name":"Super Hero Test 9135","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":981,"name":"Franky Gomez Cabrera","alterego":"Frank G[0xc3][0xb3]mez C","description":"Genius Power","powers":["Dev","soft-skills"]},{"id":982,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":983,"name":"Jose Obando 1750435566458","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":985,"name":"Eduardo Shigui","alterego":"Edu","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":986,"name":"Spider Lord df55d2","alterego":"All jsi","description"
11:20:32.301 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":987,"name":"I2_3b5b46de-51eb-4041-925d-259780f87b20","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":989,"name":"Iron Man Test 1750435576582","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":990,"name":"Iron Man Gabriel chanchay","alterego":"Tony Stark","description":"Test Gabriel Chanchay","powers":["Armor","Flight"]},{"id":991,"name":"Super Hero Test 7962","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":992,"name":"Iron Man-32d2bb49-e3fd-44bb-99a9-eb4f9f32ff4d","alterego":"Tony Stark","description":"Geniu"
11:20:32.302 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "s billionaire","powers":["Armor","Flight"]},{"id":994,"name":"Iron Man 1c576f86-eba8-42bc-beb6-822436077093","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":995,"name":"Jose Obando 1750435587942","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":997,"name":"Captain America 1750435585271","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":998,"name":"Hulk 1750435585869","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1002,"name":"Captain America 1750435590694","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1003,"name":"Alexis Name 1","alterego":" Alexis Alterego 1","descript"
11:20:32.302 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "ion":" Alexis Description 1","powers":["Armor","Flight"]},{"id":1004,"name":"Alexis Name 2","alterego":" Alexis Alterego 2","description":" Alexis Description 2","powers":["Armor","Flight"]},{"id":1005,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1006,"name":"Invincible","alterego":"Mark Grayson","description":"Viltrumite","powers":["String","Flight"]},{"id":1007,"name":"Captain America 1750435608323","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1008,"name":"Hulk 1750435608927","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1009,"name":"Black Widow 1750435610401","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]}"
11:20:32.302 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ",{"id":1010,"name":"Iron Man 3243243243232423","alterego":"Tony Stark","description":"Updated description for testing","powers":["Armor","Flight"]},{"id":1011,"name":"Nuevo Personaje #9922","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1013,"name":"Anderson Morrillo DEV # 5abf852f-9ad6-41d1-b5ff-7c16a8a17b0a","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":1014,"name":"Iron Maan","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1016,"name":"Jose Obando 1750435623722","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1018,"name":"CAPULINA 1","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1019,"name":"Iron Man xxxx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1020,"name":"Prueba Pichincha691ae3a7-8628-4066-b2c1-4391ca34b68d2724","alterego":"Alt prueba","desc"
11:20:32.302 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "ription":"Prueba des","powers":["Armor","Flight"]},{"id":1021,"name":"Iron Man Infernal Karate -519965a3-c172-4aaf-b396-8e3620e6403d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1022,"name":"Prueba Pichinchabb5c576d-1a38-460b-9558-1d66cae834c74783","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1023,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1024,"name":"Iron Man","alterego":"Tony Stark","description":"Updated descriptionm8vj42cf","powers":["Armor","Flight"]},{"id":1026,"name":"Iron Man 17630fe0-4d95-453d-a1b8-dfaf0c2ce600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1027,"name":"kvViVETsCu","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1028,"name":"Iron Man 22ac5d96-b9d8-4e27-b6ce-47595f4437f7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Fligh"
11:20:32.302 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "t"]},{"id":1029,"name":"Iron Man-9cbb33ef-c262-4f15-9fb1-4c8a009b20d2","alterego":"Tony Stark","description":"Genius billionaire","powers":["
11:20:32.302 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ""Armor","Flight"]},{"id":1030,"name":"Capitan America-998ff266-e951-4137-ba7c-800a42105de0","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1031,"name":"Nuevo Personaje #8482","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1032,"name":"Iron Man Test 1750435660148","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1033,"name":"Black Panther 9e151d01-072b-43e2-9bc1-1d14213d301c","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","Tecnolog[0xc3][0xad]a"]},{"id":1034,"name":"Iron Man 1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Arm"
11:20:32.302 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "[\r][\n]"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "or","Flight"]},{"id":1035,"name":"Black Panther 7abc858a-d9f3-4fb2-812c-f17d8bead885","alterego":"T'Challa","description":"Actualizado desde Karate Pro","powers":["Fuerza","Tecnolog[0xc3][0xad]a"]},{"id":1036,"name":"Jose Obando 1750435669712","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1039,"name":"Iron Man Rafaelhuk5tg0w","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1040,"name":"Super Rein 0bf64ce1-df70-4ba5-bdfd-a711ef2f2a06","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1041,"name":"Jose Obando 1750435693501","alterego":"Tony Stark","description":"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << ""Genius billionaire","powers":["Armor","Flight"]},{"id":1043,"name":"Iron Man 0c98d5ab-b5d3-4f38-97df-13d34e82bcaa","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1044,"name":"Iron Man 1750435705600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1045,"name":"Iron Man 1750435707067","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1047,"name":"Iron Man Rafaelfy5twhmo","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1050,"name":"Duplicate 1750435710748","alterego":"Alguien","description":"Descripci[0xc3][0xb3]n","powers":["Poder"]},{"id":1052,"name":"Iron Man 1750435714411","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1054,"name":"Iron Man Test 1750435720321","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1055,"name":"Prueba Pichincha6b7a5d34-"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "99cc-4829-9447-2f5977708b83689","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1056,"name":"Prueba Pichinchade71b3f1-7ce9-4c1b-8bde-8f31397be9d36628","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1058,"name":"Hero_322f11d1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1059,"name":"Iron Man_9d337d0a-262b-4fd9-9380-93b8596bd9e9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1060,"name":"Super Hero Test 6920","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1063,"name":"Chris Muyon","alterego":"updated alterego","description":"Updated description","powers":["Armor","Flight"]},{"id":1064,"name":"Iron Man-ade018d2-e3a3-4744-8187-9059a357d850","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1065,"name":"Capitan America-afe"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "9e1d7-6849-47a0-999f-bd1577a4ffab","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1066,"name":"Edulima 2","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1067,"name":"Chapulin colorado Test Karate","alterego":"Roberto Gomez","description":"H[0xc3][0xa9]roe ficticio mexicano","powers":["agilidad","sentido del humor","hacer reir"]},{"id":1068,"name":"Prueba Pichincha7d361762-d9c2-43d4-b9c9-b95aa746fa9b5445","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1069,"name":"Prueba Pichincha1f9c29a8-2d77-4572-91cf-ca4744a2875d6299","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1070,"name":"Diego Iron Man 7253","alterego":"Tony Stark Diego Post","descr"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "iption":"Genius billionaire","powers":["Armor","Flight"]},{"id":1071,"name":"Iron Man dc8af850-c952-41fb-9322-ae009d4e74e0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1072,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1073,"name":"Spider Boby 4","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":1074,"name":"I2_67c77687-9059-4f39-8d56-03b06a1609ef","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1075,"name":"Captain America","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1076,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1078,"name":"Hulk3","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1079,"name":"Iron Man b591afb4-f9c8-4144-b65b-349a79"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "0804dc","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1080,"name":"Hulk4","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1081,"name":"Iron Man Infernal Karate -b4c462ad-84ae-4ca7-a640-9cea46e7b1ba","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor",""
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Flight"]},{"id":1082,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1084,"name":"Iron Man2222","alterego":"Tony Stark2","description":"Genius billionaire2","powers":["Armor","Flight"]},{"id":1086,"name":"Hulk5","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1087,"name":"Iron Man Superior-9467-110913","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":1089,"name":"Super Rein 29a8d8be-5a94-43fc-9e9c-719bcfb4d00b","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1090,"name":"Castleman_2","alterego":"Super castle_2","description":"Genius Dev_2","powers":["dev_2","qa_2"]},{"id":1092,"name":"Iron Man 9d1e9be5-eef9-4207-a7e2-e96ea0921860","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1094,"name":"Hero_22bc49d9","alterego":"Tony Star"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "k","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1095,"name":"Nombre-5e067d49-f7a2-474d-b273-e798742c16e0","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1097,"name":"Iron Man-e1b4ba5e-bfd8-4c1e-9b86-ed1933082bdd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "},{"id":1098,"name":"Capitan America-2f7ca7fa-93d6-49e1-b0f0-2556a09e7b9e","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1099,"name":"Jose Obando 1750435816482","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1101,"name":"Iron Man1233333","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1103,"name":"anamcias1","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1104,"name":"Prueba Pichincha2efe7301-ce82-492e-ab9b-50a9fe0adcb36189","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1105,"name":"Prueba Pichincha04d9f706-f1c5-4705-885a-bf20263bef011287","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1106,"name":"Super Rein 68b92e31-ea35-4577-9ff9-138673e31b22","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1107,"name":"Super Rein 70f9899c-80b8-49cc-83e7-"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "e433dcb6ac0b","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1109,"name":"Iron Man two","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1110,"name":"3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1111,"name":"Nuevo Personaje #9824",""
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1112,"name":"Jose Obando 1750435849382","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1114,"name":"Captain America d3cb53","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1115,"name":"Nombre-2d21ad37-6f9c-4eb1-92bb-f38d4da61760","a[\r][\n]"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "lterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1116,"name":"Nombre-a7f42db6-7550-42ce-8e56-d3f7d5946458","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1117,"name":"Nombre-15bec9d5-27af-47ab-b58f-ee54ccbd6084","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1118,"name":"Hombre ara[0xc3][0xb1]a","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1119,"name":"Nuevo Personaje #2607","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1120,"name":"Iron Man Superior-2164-111009","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":1124,"name":"Iron Man 1 4re455","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1125,"name":"Jose Obando 1750435870292","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1127,"name":"Super Rein b4faa4b3-13d2-44b0-a8c5-5cdfb5449116","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1128,"name":"Super Rein 508c03ab-b31e-4298-81b0-2bfb01734627","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1129,"name":"IronMan-831a4736-592c-43cb-8523-4a3c24655cef","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1131,"name":"Captain America 1750435884866","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1132,"name":"Prueba Pichinchae2e03dc4-7a1d-4dcc-8d16-f950e6f122ab1502","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1133,"name":"Hulk 1750435885462","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1134,"name":"Black Widow 1750435886926","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1135,"name":"Thor 1750435888605","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1136,"name":"Captain America 1750435890278","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1137,"name":"Iron Man Infernal Karate -d40d9b46-a7b7-48b5-ba1c-b03a42c016dc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1138,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1139,"name":"Jose Obando 1750435898657","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1140,"name":"Iron Man Rafaelviwn05if","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1141,"name":"Iron Man Rafael55dbqoov","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1142,"name":"Diego Iron Man 7911","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1143,"name":"Captain America","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1144,"name":"I2_ea6d33db-a484-4793-b428-9947eb7e213d","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1146,"name":"Jose Obando 1750435911382","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1149,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1150,"name":"FttvFklngc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1151,"name":"Iron Man 1a01a65f-a13d-4bf6-9283-8297b09956d4","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1152,"name":"Iron Man 9e9e7604-700b-46d8-8056-4fd338b4477d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1154,"name":"Captain Marvel test8","alterego":"Carol Danvers","description":"the biggest hero in the world","powers":["Flight","Force"]},{"id":1155,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1156,"name":"Iron Man Test 1750435943066","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1158,"name":"Nombre-58b8d2d7-212b-41dc-bee2-e53c0374772a","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1159,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1162,"name":"nGIosGQXqY","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1163,"name":"IronMan-8968bd7e-8585-47f6-9f2b-2c98ce1e4059","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1164,"name":"Iron Man 7cfd0920-6978-4ca4-b184-d9376ba4559e","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1167,"name":"Iron Witch be8d82","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1168,"name":"Atom Eve","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1169,"name":"Castleman_3","alterego":"Super castle_3","description":"Genius Dev_3","powers":["dev_3","qa_3"]},{"id":1171,"name":"Capit[0xc3][0xa1]n Marvel","alterego":"Carol Danvers","description":"Hero[0xc3][0xad]na c[0xc3][0xb3]smica actualizada","powers":["Vuelo","Energ[0xc3][0xad]a","Superfuerza"]},{"id":1172,"name":"Iron Man-826600bd-964a-468f-8c53-1636f6bf010b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1173,"name":"Capitan America-a0c1af29-ad1f-47a3-a885-7baf335e2d59","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1174,"name":"Captain America 1750436007197","alterego":"Steve Roge"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "rs","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1175,"name":"Thor Strange f68f9e","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1176,"name":"Hulk 1750436008045","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1177,"name":"Black Widow 1750436009546","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1178,"name":"Thor 1750436011524","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1179,"name":"Captain America 1750436013150","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vi"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "branium Shield"]},{"id":1180,"name":"IronMan-181c10c6-8875-4443-a41f-9d7d4dd0004c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1181,"name":"Super Rein 6128655f-cd52-496c-9c1d-ea3f6f4d1745","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1182,"name":"Jose Obando 1750436035150","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1183,"name":"Iron Man 2234","alterego":"Tony Stark 2234","descr"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "[\r][\n]"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "iption":"Genius billionaire","powers":["Armor","Flight"]},{"id":1184,"name":"Iron Man f6f810c8-e6e5-4743-8f21-6507cb253737","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1185,"name":"error500","alterego":"Tony Stark 2234","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1187,"name":"Iron Man1111","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1188,"name":"Iron Man Infernal Karate -f79eefe3-8864-40ad-a45d-ffa9e7e19fc5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1189,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1191,"name":"Jose Obando 1750436049611","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1194,"name":"Iron Man Test 1750436056434","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1195,"name":"Iron Man Pedro","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1196,"name":"Castleman_4","alterego":"Super castle_4","description":"Genius Dev_4","powers":["dev_4","qa_4"]},{"id":1198,"name":"Jose Obando 1750436064363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1200,"name":"Iron Man test - aandino","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":1202,"name":"Silvana Bentacourt v1-1750436070985","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1203,"name":"CAPULINA _1","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1206,"name":"Nombre-82ea5e18-1f10-4512-bba7-1f5d8300507f","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1207,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1209,"name":"IronMan-5e255b9f-b537-42a1-a567-7121fa8e9b2b","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1211,"name":"Heroe BP","alterego":"Developer","description":"Genio developer","powers":["Testing","Coding"]},{"id":1212,"name":"Captain Marvel test9","alterego":"Carol Danvers","description":"Updated description","powers":["Flight","Force"]},{"id":1213,"name":"Jose Obando 1750436097345","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1214,"name":"Hero_edd03de4","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1216,"name":"Iron Man Rafaelv7wlxq55","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1217,"name":"Nuevo Personaje #1647","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1219,"name":"Jose Obando 1750436108636","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1220,"name":"Henry Moreno","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1221,"name":"Hulk 11750435885462","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1222,"name":"Doctor Strange 4421b8","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1224,"name":"CohetePlus10","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":1225,"name":"Deadpool jusimban312","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano[0xe2][0x80][0x8b][0xe2][0x80][0x8b] y antih[0xc3][0xa9]roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":1227,"name":"I2_35899795-4f6d-4b57-98e0-f0efca8f8a20","alterego":"Steve R"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "ogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1228,"name":"Marvel Gold Goblin","alterego":"Boby Osborn","description":"Student","powers":["Armor","Speed"]},{"id":1229,"name":"Iron Man Rafaelq108vy9u","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1232,"name":"Thor Hero d5ab3a","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1233,"name":"Iron Man Rafaelnwjg9787","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1234,"name":"Super Hero Test 6061","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1236,"name":"Super Hero Test 3459","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1237,"name":"jhazapat","alterego":"Jhonny Zapata","description":"Gen"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "ius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1239,"name":"Iron Man four","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1240,"name":"CAPULINA _2","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1241,"name":"Edulima 3","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1242,"name":"Jose Obando 1750436179254","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1243,"name":"Spider-Man 336","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido ar[0xc3][0xa1]cnido","Trepar paredes","Lanzar telara[0xc3][0xb1]as"]},{"id":1244,"name":"Spider-Man 249","alterego":"Otro","description":"Otro","powers":["Sentido ar[0xc3][0xa1]cnido"]},{"id":1245,"name":"Iron Man Rafael3mmjn0c2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1246,"name":"I2_1e999e6f-910d-406d-8117-566ee130cd80","alt"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "erego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1248,"name":"Dario Jimenez","alterego":"Fresco","description":"Genius billionaire","powers":["Super Strength","Flight"]},{"id":1249,"name":"Ariel Arnedo","alterego":"AArnedo","description":"Developer","powers":["Java"]},{"id":1250,"name":"Nuevo Personaje #7602","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1252,"name":"Iron f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1253,"name":"Iron Man 22345","alterego":"Tony Stark 22345","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1255,"name":"Iron Man Rafaelzcc0bgm3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1257,"name":"El pepes","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1260,"name":"Test User 555bd231-8482-441f-b0d8-cd5271b2a461","alterego":"Tony S"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "tark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1262,"name":"Character-5b78817d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1264,"name":"Character-1b14c2c9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1266,"name":"Iron Maiden 5","alterego":"Tony Mayor","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1267,"name":"Character-986b2129","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1268,"name":"Iron Man-9ee08370-fada-4dff-98f3-62374a39d806","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1269,"name":"Freddy Tacuri","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1270,"name":"chilindrina","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1271,"name":"Iron Man-94e992b9-d4e1-43f6-9291-b3cf8ca1f954","alterego":"Tony "
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Stark","description":"[\r][\n]"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "2000[\r][\n]"
11:20:32.303 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Genius billionaire","powers":["Armor","Flight"]},{"id":1272,"name":"Capitan America-198ffc37-5aaf-4c8f-989e-9c11a0104c1c","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1273,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1275,"name":"Character-2ae7316f","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1276,"name":"Error","alterego":"Error","description":"Error","powers":["Error"]},{"id":1278,"name":"Jose Obando 1750436255862","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1279,"name":"Nuevo Personaje #1365","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1281,"name":"Black Panther 0bba45bc-fb53-45aa-b275-c44a0ded2b70","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","Tecnolog[0xc3][0xad]a"]},{"id":1282,"name":"Chleona3","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1283,"name":"Black Panther d6be0872-7e26-4373-b303-e3cec93ffb70","alterego":"T'Challa","description":"Actualizado desde Karate Pro","powers":["Fuerza","Tecnolog[0xc3][0xad]a"]},{"id":1284,"name":"Iron Man 4b400a30-fc3e-4db4-b3ba-973fd2d278ce","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1287,"name":"qnNAZGzSWh","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1288,"name":"#(name)","alterego":"#(alterego)","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1289,"name":"nameRandom","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1290,"name":"Chleona4","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1291,"name":"Spider-Manew","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":1292,"name":"Anderson Morrillo DEV # 60c81113-e829-4172-941d-964a3eb233a0","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":1295,"name":"Captain America 1750436297497","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1296,"name":"Hulk 1750436298248","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1298,"name":"Black Widow 1750436299811","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1299,"name":"Thor 1750436301519","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1300,"name":"Captain America 1750436303220","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1301,"name":"Iron Fist","alterego":"Danny Rand","description":"Embodies the power of Shou Lao","powers":["Glogin fist","Strenght"]},{"id":1302,"name":"Prueba Pichinchaa2d854e2-e4f9-4f94-885b-efcb7b4c4eac5836","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1303,"name":"Iron Man8888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1304,"name":"Spider-Man-9732f352-5d73-49e1-8ab8-7c5c14e0de08","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":1305,"name":"Iron Man-7104bc90-f6be-4118-9e0a-88bde90adfd3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1306,"name":"Iron Man-b92a87a2-76a0-47f3-b85b-101c152fb5b9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1307,"name":"Capitan America-5c2be5bb-ce14-4672-9b22-d460bfb7bf2d","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1308,"name":"Iron Man five","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1309,"name":"IronMan-760ef4ff-ff4d-4fad-be51-fa741ef28c42","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1310,"name":"Jose Obando 1750436332592","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1311,"name":"Iron Man_12d0076b-8547-4da8-a12a-027440918f23","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1312,"name":"wVDNiCqyfr","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1314,"name":"Vero","alterego":" Vero","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1315,"name":"Diego Iron Man 8347","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1316,"name":"Iron Man88888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1317,"name":"Ver[0xc3][0xb3]nica","alterego":"Vero","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1319,"name":"Verito","alterego":"Vero","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1321,"name":"Nuevo Personaje #4192","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1322,"name":"Prueba Pichincha55d72aa8-ce43-4aab-8342-0c1a777269a79919","alterego":"Alt prueba","description":"Pru"
11:20:32.538 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "eba des","powers":["Armor","Flight"]},{"id":1324,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1325,"name":"Iron Man888888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1326,"name":"IronMan-30014040-40b3-4357-8131-835a25cacb43","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1327,"name":"globalName","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1328,"name":"Ghost Rider JC #(random)","alterego":"Ghost Rider JC2","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":1330,"name":"Iron Man eca5a6be-6275-4ae7-8966-e1e9517c5c36","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1332,"name":"Super Hero Test 4977","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1333,"name":"S"
11:20:32.538 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "uper Hero Test 5990","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1335,"name":"Super Hero Test 8050","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1336,"name":"Jose Obando 1750436371589","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1337,"name":"Carmita","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1338,"name":"Diego Iron Man 5950","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1339,"name":"Iron Man c115eed6-9993-48c1-8bc7-85c85a8f10d7","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1341,"name":"Character_1750436400790","alterego":"Jhonny Zapata","description":"Genius informatician and hacker",""
11:20:32.538 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "powers":["Hacking","Programming","Cybersecurity"]},{"id":1343,"name":"Diego Iron Man 312","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1344,"name":"Nombre-40980860-67f2-4164-856b-886eb56c23af","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1345,"name":"BatMans 20[\r][\n]"
11:20:32.538 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "43f[\r][\n]"
11:20:32.538 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "26","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1347,"name":"Mario1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1348,"name":"Iron Man_e06abffa-f93b-4ad0-899d-75eb870ee4dc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1349,"name":"Hero_e7fc984a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1352,"name":"Super Hero Test 6910","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1353,"name":"Super Hero Test 8267","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1355,"name":"Super Hero Test 4230","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]}][\r][\n]"
11:20:32.538 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "0[\r][\n]"
11:20:32.538 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "[\r][\n]"
11:20:32.538 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 0][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
11:20:32.538 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-0: set socket timeout to 0
11:20:32.538 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 0][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:32.538 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
11:20:32.538 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-0: Close connection
11:20:32.538 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
11:20:32.538 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 763
1 < 200
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436431&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=Zq8x1PGCgAaehw95%2FNZUTUsxyKr2k7djpnk%2FbvgLOs4%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436431&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=Zq8x1PGCgAaehw95%2FNZUTUsxyKr2k7djpnk%2FbvgLOs4%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 16:20:31 GMT
1 < Via: 1.1 vegur
[{"id":33,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":34,"name":"Valid Character-1750394792389","alterego":"Valid Alter","description":"Valid description","powers":["Power1","Power2"]},{"id":37,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description Jose","powers":["Armor","Flight"]},{"id":39,"name":"Test Special-1750394871627","alterego":"Special Alter","description":"Description with symbols","powers":["Power1","Power2"]},{"id":42,"name":"Iron Man","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":44,"name":"Iron Man2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":45,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description7xj82r1x","powers":["Armor","Flight"]},{"id":47,"name":"SY","alterego":"SYS","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":48,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":49,"name":"Iron Man3","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":50,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":53,"name":"Red Ranger","alterego":"Jason","description":"Red Power Ranger","powers":["Armor","Fight"]},{"id":55,"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]},{"id":56,"name":"Spider-Man","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido de Marvel","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":58,"name":"Gerson Veramendi","alterego":"Senior FullStack Developer","description":"Genius billionaire","powers":["Java","Python","JavaScript","TypeScript","PHP",".NET"]},{"id":59,"name":"KarateTestUser","alterego":"Karate Alter","description":"Personaje creado para pruebas automÃ¡ticas","powers":["TestPower1","TestPower2"]},{"id":63,"name":"Eduardo Vizuete","alterego":"eduviz","description":"eduardo dev","powers":["Armor","Flight"]},{"id":65,"name":"Iron Maiden","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":66,"name":"Iron Man 1750431405867","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":67,"name":"Iron Man Test3 1750431406349","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":68,"name":"Iron Man Test5 1750431407189","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":69,"name":"Iron Man Test7 1750431410793","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":71,"name":"Spider-Man Test11 1750431412674","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":72,"name":"Captain America Test11 1750431412674","alterego":"Steve Rogers","description":"SÃºper soldado","powers":["Fuerza","Escudo","Liderazgo"]},{"id":73,"name":"kcatucuamba","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":74,"name":"Iron Man 1750431456185","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":75,"name":"Iron Man Test3 1750431456502","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":76,"name":"Iron Man Test5 1750431457318","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":77,"name":"Iron Man Test7 1750431458110","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":79,"name":"Spider-Man Test11 1750431459939","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":80,"name":"Captain America Test11 1750431459939","alterego":"Steve Rogers","description":"SÃºper soldado","powers":["Fuerza","Escudo","Liderazgo"]},{"id":81,"name":"Iron ManX","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":83,"name":"Chapulin-Colorado","alterego":"Chespirito","description":"mas fuerte que un raton","powers":["ValentÃ­a","Humor"]},{"id":84,"name":"Iron Man 22a4ce49-91b0-462d-828a-40b438ac05d7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":87,"name":"JSI","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":90,"name":"Iron Man 2","alterego":"Tony Dark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":91,"name":"Iron Man 0192799a-9023-415b-828c-92b298e570da","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":92,"name":"Iron Man 3","alterego":"Tony Dark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":94,"name":"CohetePlus9","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":95,"name":"Test Character 1750431844448","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":96,"name":"Test Character 1750431845069","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":97,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":99,"name":"Test Character 1750431846880","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":101,"name":"Test Character 1750431889143","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":102,"name":"Test Character 1750431889375","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":103,"name":"Test Character 1750431889993","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":104,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":106,"name":"Test Character 1750431891804","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":108,"name":"Spider-Man Eva","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido de Marvel","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":109,"name":"Iron Manssss2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":110,"name":"Test Character 1750431950573","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":111,"name":"Test Character 1750431951720","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":117,"name":"Diego Zurita","alterego":"Diego","description":"Poderoso","powers":["Fuerte"]},{"id":118,"name":"Test Character 1750432019426","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":119,"name":"Test Character 1750432019668","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":120,"name":"Nuevo Personaje","alterego":"Alter Ego","description":"DescripciÃ³n del nuevo personaje","powers":["Poder1","Poder2"]},{"id":121,"name":"Iron Manf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":122,"name":"Test Character 1750432020309","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":123,"name":"Iron Man Full v2","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":125,"name":"Test Character 1750432022197","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":126,"name":"Iron Man 53ca6cc1-a1bd-4f2b-93f9-1633be1aad6b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":127,"name":"Hulk 38179ff8-3a8b-4688-8f37-3e731ac47905","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":128,"name":"Iron Man 449254f2-2df9-477d-acc7-69fc740caffd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":129,"name":"Hulk 46ce508f-89e3-4b05-bc80-25c9a16123a4","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":130,"name":"Thor 2e08893c-7920-498d-90f9-3343b0a54908","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":131,"name":"Iron Man ac45fd26-8b98-487d-81c9-f2e9d934384e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":133,"name":"Santiago Sanchez","alterego":"Santi S","description":"Ingeniero","powers":["Fuerte","Inteligente"]},{"id":134,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":136,"name":"Iron Man 200","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":137,"name":"Iron Man Eva","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":138,"name":"Test Character 1750432250612","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":139,"name":"Test Character 1750432250854","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":140,"name":"Test Character 1750432251501","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":141,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":143,"name":"Test Character 1750432253388","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":144,"name":"Iron Man 86dcbb11-1522-4457-afd9-398d1c189b8a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":146,"name":"Hulk eea541c7-2292-4cef-af8c-d19a81e39cb9","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":147,"name":"Thor 6fa4faf3-c0bb-475d-b0c9-1570131ddcc6","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":148,"name":"Capitan America de7de8bc-4a24-4313-9cfe-200dfa6d2775","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":149,"name":"IronMan-92ac203d-0658-432a-8ebc-e6466d1eb66f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":151,"name":"Spider-Man-5","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido de Marvel","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":152,"name":"Iron Man e354d0ac-a1c2-46aa-be2e-f1d6d8f9b459","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":153,"name":"Hulk e459e8d2-7af9-4bf7-b9d5-22a9f453fffb","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":154,"name":"Thor 2e94238c-4bea-45ec-b042-00ed2e7e8fb3","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":155,"name":"Capitan America 9da54d03-62b6-49ac-9b9e-164d80e3c02d","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":157,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":158,"name":"Hulk 291f5440-5a17-48a4-bdec-192aa5ad91a7","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":159,"name":"Thor 3610678a-d9c8-4848-b133-4c7ebb9b1f6d","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":160,"name":"Capitan America 5c6fb5f4-1f84-4149-87d5-f09499cebe3b","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":162,"name":"Spider-Man-6","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido de Marvel","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":163,"name":"Captain Marvel","alterego":"Carol Danvers","description":"the biggest hero in the world","powers":["Flight","Force"]},{"id":164,"name":"Iron Man dde04cc2-ac24-4eb4-ac77-ab5592d642fc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":165,"name":"Hulk c06d00b0-f944-432e-8cbe-646bb23e5422","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":166,"name":"Thor e04e9665-ee54-4b9c-baa4-44a41efd1133","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":167,"name":"Capitan America 65bfa9f4-efcd-4f20-8f98-a824c7d8eac4","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":169,"name":"Test Character 1750432373791","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":170,"name":"Test Character 1750432374022","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":171,"name":"Test Character 1750432374630","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":172,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":174,"name":"Test Character 1750432376433","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":175,"name":"Iron Man #3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":176,"name":"Iron Man 5580fbb0-f402-4c30-8f00-9c9543cb5a6b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":178,"name":"Test Character 1750432464491","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":179,"name":"Test Character 1750432465100","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":181,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":184,"name":"Test Character 1750432467117","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":185,"name":"Hulk","alterego":"No  Recuerdo","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":186,"name":"Loki","alterego":"Loki Laufeyson","description":"Dios del engaÃ±o","powers":["Magia","IlusiÃ³n"]},{"id":187,"name":"Ghost Rider JC","alterego":"Ghost Rider JC","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":188,"name":"IronMan-4e1c6d16-e5ee-42d8-8337-49de7e644f2c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":189,"name":"Deadpool jusimban3","alterego":"Wade Winston Wilson","description":"Updated description","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":191,"name":"CasaPlus","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":192,"name":"Iron Man 2beed694-dc05-4dae-a2ca-5607f27bf28e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":193,"name":"BatMans 2025","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":194,"name":"Jose Obando 1750432629445","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":195,"name":"Test Character 1750432656836","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":196,"name":"Test Character 1750432657078","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":197,"name":"Test Character 1750432657714","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":198,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":200,"name":"Jose Obando 1750432659387","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":201,"name":"Test Character 1750432659614","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":202,"name":"Iron Man e0a94dac-e873-4970-bd09-b4203cd66860","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":203,"name":"Chema Venegas","alterego":"JosÃ© Maria Venegas","description":"Updated description","powers":["Armor","Flight"]},{"id":204,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":208,"name":"Iron Man 8aef9187-dfcf-4c54-92fe-e1833b0159e6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":209,"name":"Iron Man BP","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":210,"name":"Jose Obando 1750432762927","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":211,"name":"Gilgamesh FSN Unlimited Blades","alterego":"Emiya Shirou","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":212,"name":"Iron Man","alterego":"Tony Stark v1","description":"Updated description","powers":["Armor","Flight"]},{"id":213,"name":"Diego Iron Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":214,"name":"Iron Man 33145b49-a097-4c72-981e-4c57d9a5e88c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":215,"name":"Hulk ebbc0b5f-1969-403e-a742-67d590a463ae","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":216,"name":"Thor bc05acef-514d-4521-9c92-fc5bde2bbdd8","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":217,"name":"Capitan America 51f41353-8527-48a5-9048-1741d044680f","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":219,"name":"Jose Obando 1750432788774","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":220,"name":"Capitan America","alterego":"Cris","description":"Muy muy fuertote","powers":["Escudo"]},{"id":221,"name":"Prueba name","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":222,"name":"Spider-Man-7","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido de Marvel","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":225,"name":"Iron Man 1da9babc-0f1b-4ad5-a4e7-06c3c258c68a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":226,"name":"Jose Obando 1750432896081","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":227,"name":"Prueba name1","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":228,"name":"Iron Man6","alterego":"Tony Stark6","description":"Genius billionaire6","powers":["Armor6","Flight6"]},{"id":230,"name":"Iron Woman","alterego":"Tony Starker","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":231,"name":"Iron Man 3244c4dc-b252-4dad-8ca9-5832a0b47887","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":232,"name":"Hulk 965fef05-74b4-4eb7-b0db-05133f03b247","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":233,"name":"Thor 3ddb8a85-f427-4b58-ba84-8de2b7e501e4","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":234,"name":"Capitan America b95c1248-8deb-48ea-a31a-058efb0c257e","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":235,"name":"Jose Obando 1750432985709","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":237,"name":"Pedro Costa","alterego":"Pedrito Coco","description":"Un costeÃ±o buena onda que le gusta la playa","powers":["Reir","Cantar","Bailar"]},{"id":238,"name":"Silvana Bentacourt","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":239,"name":"Iron Man100","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":240,"name":"Iron Man JZ","alterego":"Tony Stark JZ","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":241,"name":"Wolverine","alterego":"James Howlett","description":"Mutante con garras de adamantium y factor de curaciÃ³n","powers":["RegeneraciÃ³n","Garras de adamantium","Sentidos agudos","Longevidad"]},{"id":242,"name":"Iron Man JZZ","alterego":"Otro JZ","description":"Otro","powers":["Armor"]},{"id":243,"name":"Iron Man1900","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":244,"name":"hugo leon","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":246,"name":"Iron Man0","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":247,"name":"Iron Alexis","alterego":"Tony Alexis","description":"Genius billionaire soccer","powers":["Armor","Flight"]},{"id":248,"name":"Jose Obando 1750433080040","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":249,"name":"Iron Man abf120f1-71fc-4a6e-8458-603dd31e22c0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":250,"name":"Jose Obando 1750433097032","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":251,"name":"Iron Men","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":252,"name":"Silvana Bentacourt v1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":253,"name":"Test Character 1750433107277","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":254,"name":"Test Character 1750433107521","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":255,"name":"Test Character 1750433108172","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":256,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":258,"name":"Test Character 1750433110415","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":259,"name":"Anderson Morrillo DEV #","alterego":"Worst Automatizator ever","description":"updated description # 3cbc9b39-6821-47e7-8967-0b323215d9f5","powers":["JAVA","NET"]},{"id":260,"name":"uniqueName","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":261,"name":"Iron Man Infernal 1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":262,"name":"Iron Man1901","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":263,"name":"Accelerator","alterego":"Emiya Shirou ","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":265,"name":"IronMan-","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":266,"name":"Iron Man 20fe3893-3e5e-450b-a582-29e860e97061","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":267,"name":"Hulk d9c79414-8bed-4759-8490-d1626dd0baaa","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":268,"name":"Thor 98acbad0-52a4-41bf-9cfe-ff4e57f25317","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":269,"name":"Capitan America 159d7856-e8fc-409e-b072-e76f81547bc6","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":271,"name":"Iron Mans","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":273,"name":"TestBP","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":275,"name":"IronFB-","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":277,"name":"Test Character 1750433288330","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":278,"name":"Test Character 1750433288565","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":279,"name":"Test Character 1750433289216","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":280,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":282,"name":"Test Character 1750433291431","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":283,"name":"Iron Man 43e885e6-1428-4f2e-a2c9-4d3760dfa719","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":284,"name":"Iron Mon","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":285,"name":"Iron 6","alterego":"Tony 6","description":"Genius billionaire6","powers":["Alto6"]},{"id":287,"name":"Thryion Lannister","alterego":"Emiya Shirou ","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":288,"name":"Iron Man c2cb5987-8855-46f0-b661-9006e15192c6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":289,"name":"Chris M","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":290,"name":"Iron Man23232","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":291,"name":"Super Hero Test 4746","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":292,"name":"Iron Max","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":295,"name":"Test Character 1750433506400","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":296,"name":"Test Character 1750433506630","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":297,"name":"Test Character 1750433507077","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":298,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":299,"name":"Iron Man 22","alterego":"Tony Stark 22","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":300,"name":"El pepe","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":302,"name":"Test Character 1750433509103","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":303,"name":"Iron Man1902","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":304,"name":"Super Hero Test ","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":305,"name":"IronFB-69d7a1a7-49f9-4cf8-8f24-04ede770aa36","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":308,"name":"Jose Obando 1750433570443","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":310,"name":"Iron Man1903","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":311,"name":"Black Widow","alterego":"Natasha Romanoff","description":"EspÃ­a rusa","powers":["Combate","Espionaje"]},{"id":312,"name":"Thor","alterego":"Thor Odinson","description":"Dios del trueno","powers":["Control del rayo","Super fuerza","Mjolnir"]},{"id":313,"name":"Captain America","alterego":"Steve Rogers","description":"Super soldado","powers":["Super fuerza","Escudo de Vibranium"]},{"id":314,"name":"Spider-Man 113189","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido de Marvel","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":315,"name":"CohetePlus","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armor","Flight"]},{"id":318,"name":"Super Hero Test 123","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":319,"name":"Test Character 1750433582237","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":320,"name":"Test Character 1750433582455","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":321,"name":"Test Character 1750433583360","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":322,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":323,"name":"max versatapen","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":325,"name":"Test Character 1750433585661","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":326,"name":"Iron Man 0a790bc9-1ee6-41f5-8a31-706d23a56f87","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":328,"name":"Deadpool jusimban","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano?? y antihÃ©roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":329,"name":"Test Character 1750433618842","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":330,"name":"Test Character 1750433619055","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":331,"name":"Test Character 1750433619974","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":332,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":334,"name":"Test Character 1750433622270","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":335,"name":"GatunoNeptuno","alterego":"Naranjoso","description":"Crazy cat","powers":["Meow","Cry in desperation"]},{"id":336,"name":"Test Character 1750433629991","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":337,"name":"Test Character 1750433630210","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":338,"name":"Test Character 1750433630809","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":339,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":341,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":342,"name":"Iron Man tst","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":343,"name":"CohetePlus1","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":344,"name":"Iron Man God","alterego":"Tony Stark","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":347,"name":"Spider-Man1","alterego":"Peter Parker1","description":"Friendly neighborhood Spider-Man falso","powers":["Wall-crawling","Spider-sense"]},{"id":348,"name":"CasaPlus1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":349,"name":"Test Character 1750433708796","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":350,"name":"Test Character 1750433709031","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":351,"name":"Test Character 1750433709482","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":352,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":354,"name":"Test Character 1750433710980","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":355,"name":"Iron Man Infernal Karate -e2462451-d7f9-4eb5-9502-2f202828f715","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":356,"name":"Test Character 1750433733222","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":357,"name":"Test Character 1750433733461","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":358,"name":"Test Character 1750433733906","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":359,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":361,"name":"Test Character 1750433735384","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":362,"name":"Jose Obando 1750433737747","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":363,"name":"Updated Franz Herman","alterego":"Max Verstappen","description":"piloto de F1","powers":["Armor","Flight"]},{"id":365,"name":"Deadpool jusimban2","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano?? y antihÃ©roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":366,"name":"Iron Man Superior","alterego":"Tony Stark","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":367,"name":"Test Character 1750433753944","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":368,"name":"Test Character 1750433754176","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":369,"name":"Test Character 1750433754632","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":370,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":372,"name":"Test Character 1750433756102","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":373,"name":"Iron Man d53f8847-99c4-4496-a60d-7fb3e7c9c9a9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":374,"name":"Iron Man 4711","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":375,"name":"Test Character 1750433774349","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":376,"name":"Iron Manchs","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":377,"name":"Test Character 1750433774586","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":378,"name":"Test Character 1750433775033","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":379,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":381,"name":"Test Character 1750433776511","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":382,"name":"Iron Man1904","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":383,"name":"Deadpool jusimban3","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano?? y antihÃ©roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":384,"name":"CohetePlus2","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":385,"name":"Jose Obando 1750433795597","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":386,"name":"Iron Man 2e68e284-dd9d-4435-80b2-6481d8e5bac8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":387,"name":"Iron Man Infernal Karate -5ba06ebc-c345-4fce-98d3-59ef4568efce","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":388,"name":"Test Character 1750433797315","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":389,"name":"Test Character 1750433797554","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":390,"name":"Test Character 1750433798007","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":391,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":393,"name":"Test Character 1750433799483","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":394,"name":"Iron Man tst2","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":395,"name":"Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":396,"name":"Iron Man TestBP","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":398,"name":"Diego2 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":399,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":401,"name":"Test Character 1750433836144","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":402,"name":"Test Character 1750433836374","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":403,"name":"Test Character 1750433836808","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":404,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":406,"name":"Test Character 1750433838281","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":407,"name":"Test Character 1750433845402","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":408,"name":"Test Character 1750433845637","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":409,"name":"Test Character 1750433846080","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":410,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":411,"name":"Spider-Man1-cb88af9d-9e1d-4965-9a89-77df954d9e16","alterego":"Peter Parker1","description":"Friendly neighborhood Spider-Man falso","powers":["Wall-crawling","Spider-sense"]},{"id":413,"name":"Test Character 1750433847614","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":414,"name":"CohetePlus3","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":415,"name":"Spiderman Test Karate","alterego":"Peter Parker","description":"HÃ©roe arÃ¡cnido de Marvel","powers":["agilidad","sentido arÃ¡cnido","trepar paredes"]},{"id":416,"name":"Test Character 1750433855427","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":417,"name":"Iron Manchss","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":418,"name":"Test Character 1750433855662","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":419,"name":"Test Character 1750433856281","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":420,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":422,"name":"Test Character 1750433858961","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":423,"name":"ACC","alterego":"AGCC","description":"Genius billionaire and philanthropist","powers":["Armor","Flight"]},{"id":424,"name":"Iron Man Infernal Karate -1e7b39d2-3f63-4df9-8c8b-a8122365e368","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":425,"name":"Iron Man 498db3a1-beab-43c9-993c-306b2f6eac11","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":426,"name":"Iron Man1905","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":428,"name":"Anderson Morrillo DEV # 54ce83f6-bbcb-4137-bffe-78aefa52fe40","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":429,"name":"IronFbb5a60f02-3e76-4d54-8277-5e0841ef8b8f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":430,"name":"Iron Man66","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":432,"name":"Test Character 1750433899423","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":433,"name":"Test Character 1750433899666","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":434,"name":"Test Character 1750433900743","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":435,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":437,"name":"Test Character 1750433903439","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":438,"name":"Carmita","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":439,"name":"Iron Man1906","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":440,"name":"Anderson Morrillo DEV # 3969a194-06d5-49a9-9092-733f4e1c8281","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":441,"name":"Ghost Rider JC Updated","alterego":"Ghost Rider JC Updated","description":"Demon Updated","powers":["Fire","Punishing gaze"]},{"id":442,"name":"Jose Obando 1750433957284","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":443,"name":"Iron Man Rafael","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":444,"name":"Iron Marco","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":446,"name":"Javier Simbana","alterego":"All","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":448,"name":"Iron Man a63bcaa0-8085-4566-b0cf-8f5e1b0c5c6c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":449,"name":"Iron Man 7631688d","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":450,"name":"Iron Man eb0e8d97","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":451,"name":"Iron Man cb1b3f87","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":452,"name":"Iron Man 1df3c71a","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":453,"name":"Green Goblin","alterego":"Ned","description":"Student","powers":["Armor","Flight"]},{"id":454,"name":"Diana1750433951","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":455,"name":"Iron Man Infernal Karate -41787326-1671-4354-95fb-5b06971d3883","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":458,"name":"Iron Man Test","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":459,"name":"Iron Man 4678f266-a460-48f1-ae8e-d927dad2bd16","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":460,"name":"Iron Man #(randomNum)","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":461,"name":"Alexis Name 3 Updated","alterego":"Alexis Alterego 3 Updated","description":"Alexis Description 3 Updated","powers":["Armor","Flight"]},{"id":463,"name":"Iron Man1907","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":464,"name":"Spider-Man-fda525ee-03b4-4a9a-bac2-b5b69f49e7a3","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":465,"name":"spiderman.name","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":466,"name":"IronFb57bd5b58-ae3d-4373-acfa-2919bd800e0e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":467,"name":"Iron Man b6d81","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":468,"name":"Javier Simbana 1","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":469,"name":"Iron Man4","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":470,"name":"Bob1750434058","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":471,"name":"IronMan_072abe9d-e0a2-4650-88bf-273284a64666","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":472,"name":"Chris M1","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":473,"name":"Iron Man 4c592141-80e1-4206-9a8b-06c0bcc1b363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":474,"name":"Green Goblin 2","alterego":"Ned","description":"Student","powers":["Armor","Flight"]},{"id":475,"name":"Iron Man1908","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":476,"name":"Iron Man 56","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":478,"name":"Iron Man tst23","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":479,"name":"Iron Man Infernal Karate -b4bb865d-a131-4ddd-b275-d6a0554308a5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":481,"name":"Iron Mansanchez","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":482,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":483,"name":"Character-ef2c4b87","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":484,"name":"Character-e9d66f0e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":485,"name":"Character-ad7b4a88","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":486,"name":"Character-ac632283","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":487,"name":"IronFba388ed7d-d28b-4d08-b9c2-6834d477af00","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":488,"name":"Iron Man9","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":490,"name":"Iron Man 91e6d9ac","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":491,"name":"Iron Man 0f671a8a","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":492,"name":"Iron Man 35a2388e","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":493,"name":"Iron Man 32ebadfa","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":494,"name":"Anderson Morrillo DEV # aee869ff-edc7-4235-96a3-a3bd18fe402a","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":495,"name":"Anderson Morrillo DEV #","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":497,"name":"Iron Man 5a56b4d8","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":498,"name":"Iron Man 2f038a75","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":499,"name":"Iron Man 5454745d","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":500,"name":"Iron Man f614f678","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":501,"name":"Iron Man 80","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":502,"name":"Charlie1750434173","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":504,"name":"Super Madre","alterego":"Luz Toaquiza","description":"Puede hacer varias cosas","powers":["Amor","ComprensiÃ³n"]},{"id":505,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":506,"name":"Captain America 1750434216603","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":507,"name":"Hulk Supremo 1723463053 1750434217197","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":508,"name":"Black Widow 1750434217635","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":509,"name":"Iron Man tst233","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":510,"name":"Thor 1750434218264","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":511,"name":"Captain America 1750434218953","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":512,"name":"Spider-Man-02368906-8b2b-4e16-80b0-71dd5d2f5c4d","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":513,"name":"Iron Man 7fc9b5b3-d7c2-462b-a1ee-116cef0932da","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":514,"name":"Anderson Morrillo DEV # ef460b18-ae1c-4e5e-8757-f0eb0a32ede8","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":516,"name":"Chris Muyon xd","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":517,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":518,"name":"Iron Man1909","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":519,"name":"Iron Man58","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":520,"name":"Ironasdsadsa Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":521,"name":"Iron Man 9619","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":523,"name":"Iron Man 3378","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":524,"name":"Iron Man 5092","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":525,"name":"Iron Man 563","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":526,"name":"Iron Man 2753","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":527,"name":"Iron Man 202","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":529,"name":"Iron Man 9862","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":530,"name":"the winter soldier","alterego":"Stalin Condolo","description":"Un soldado del invierno","powers":["Brazo de hierro","metralladora"]},{"id":531,"name":"Iron ManSanchez2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":532,"name":"Jose Obando 1750434296881","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":533,"name":"Sonic-27e58e7b-aee1-43d5-b47f-31b79ab9ef7a","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":534,"name":"Iron Man 9ce51371-d1a9-4d09-9549-f286b5e8dc82","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":536,"name":"Silvana Bentacourt v1-1750434339544","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":537,"name":"Personaje actualizado-1750434343376","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":539,"name":"Iron Man Superior-794","alterego":"Tony Stark","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":540,"name":"Hero_eb7fb2b3-489f-435d-8977-06daf4295252","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":541,"name":"Hero_98d318cb-59d0-4154-9032-ebe5943ae31a","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":542,"name":"Iron Man TestBP1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":543,"name":"Iron Man 18ca4000-009f-4d19-9c87-fc0de9768e13","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":545,"name":"Alexis Name 2 Updated","alterego":"Alexis Alterego 2 Updated","description":"Alexis Description 2 Updated","powers":["Armor","Flight"]},{"id":546,"name":"Iron Man1910","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":547,"name":"Alexis Name 3","alterego":" Alexis Alterego 3","description":" Alexis Description 3","powers":["Armor","Flight"]},{"id":550,"name":"nombreCreate","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":551,"name":"Character","alterego":"Hero","description":"A character","powers":["strength"]},{"id":552,"name":"Jose Obando 1750434393499","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":553,"name":"VerÃ³nica Vicente","alterego":"Tony Stark","description":"Software engineer and superhero enthusiast","powers":["Armor","Flight"]},{"id":554,"name":"jchuldeb","alterego":"Fernando Chulde","description":"Editar descripciÃ³n","powers":["Armor","Flight"]},{"id":555,"name":"Iron Man 1750434398028","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":556,"name":"Iron Man Test3 1750434398378","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":557,"name":"Iron Man Test5 1750434399272","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":558,"name":"Iron Man Test7 1750434400132","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":560,"name":"Spider-Man Test11 1750434402397","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":561,"name":"Captain America Test11 1750434402397","alterego":"Steve Rogers","description":"SÃºper soldado","powers":["Fuerza","Escudo","Liderazgo"]},{"id":563,"name":"IronMan-1f93da34-ad9a-4dfa-bb94-45ae015cb268","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":564,"name":"Iron Man1911","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":565,"name":"Iron Man 9597c7ae-c86a-4a19-8070-00c9aeabd823","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":566,"name":"Iron Man aa60b152-bc11-4c5f-8de9-7db12708385b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":567,"name":"Iron Maiden 3","alterego":"Tony Mayor","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":568,"name":"Iron Marco1","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":569,"name":"Iron Man-3a282d5c-35e9-4f74-94f4-22d383a00024","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":570,"name":"Iron Man 982e99df-678a-47e0-88fa-637de0b6d649","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":571,"name":"XIron ManX","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":572,"name":"Iron Man 16897711","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":573,"name":"Iron Man 83ed4d75","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":574,"name":"Iron Man 3904c383","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":575,"name":"Iron Man abf03b68","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":577,"name":"Spider-Man-5e6c5350-ad12-41f5-9358-687c73bd9279","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":579,"name":"milmoral1","alterego":"Tony Stark-milmoral1","description":"Updated description","powers":["Armor","Flight"]},{"id":580,"name":"Iron Man 63","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":581,"name":"Iron Man 4731","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":582,"name":"Iron Man 2233","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":583,"name":"Iron Man 363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":584,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":585,"name":"Iron Man 8265","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":588,"name":"Black Widow TestChapter","alterego":"Natasha Romanoff","description":"Brave women","powers":["Guns","Fight"]},{"id":591,"name":"Iron Marck","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":592,"name":"Chris Muyon 42146","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":594,"name":"Capitan America Negrito 2","alterego":"Un nombre Random","description":"Personaje para prueba temporal","powers":["Red","Blue"]},{"id":595,"name":"Iron Man 30865d8b-f4d1-4d3a-8da9-61065a3d9e1b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":597,"name":"Iron Man 1195","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":598,"name":"Iron Man 2555","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":599,"name":"Iron Man 226","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":600,"name":"Iron Man 3826","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":602,"name":"Iron Man 2839","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":605,"name":"Kramerx","alterego":"Updated Hero","description":"Updated description","powers":["updated power"]},{"id":606,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":607,"name":"I2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":608,"name":"Silvana Bentacourt v1-1750434549919","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":609,"name":"Jose Castle","alterego":"Super Pichincha","description":"Genius Developer","powers":["Armor","Flight","Super Strength","Intelligence"]},{"id":610,"name":"Chris Muyon 23952","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":611,"name":"jose","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":613,"name":"Iron Man-1e2ab87a-d0d2-4656-913a-c4279d3bfa6f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":614,"name":"Iron Man 5d59a582-166c-4720-b20d-cec95d9982f0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":615,"name":"Jose Obando 1750434583471","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":616,"name":"milmoral2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":617,"name":"milmoral3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":618,"name":"Iron Man Superior-4235","alterego":"Tony Stark","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":621,"name":"Iron Man v2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":623,"name":"IronMan-e279bc88-b3e5-4731-9a82-0fbce36ad6e3","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":624,"name":"Test Character 1750434618","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":627,"name":"CohetePlus6","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":629,"name":"Spider-Man-New","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido de Marvel","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":630,"name":"Captain America 1750434654993","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":631,"name":"Hulk Supremo 1723463053 1750434655581","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":632,"name":"Black Widow 1750434655839","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":633,"name":"Thor 1750434656329","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":634,"name":"Captain America 1750434656777","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":635,"name":"Iron Man dea5b9c1-049a-4cc7-93b0-f46351816106","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":636,"name":"Iron Man fd4eebef-5bc2-440d-aaab-761cf21cfb05","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":637,"name":"Iron Marck10","alterego":"Marco Jativa","description":"Genius Multi billionaire","powers":["Armor","Flight"]},{"id":641,"name":"Iron Man-e60af0ac-255a-4fe3-bfb4-438b4aa31007","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":642,"name":"Iron Man Superior-3419","alterego":"Tony Stark","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":643,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":645,"name":"IronFbb697fe07-575a-4809-be2c-5a8ca55a9e42","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":646,"name":"Silvana Bentacourt v1-1750434702372","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":649,"name":"HeroeConsulta_5dc7aabc-c03f-48f8-a0c5-dcac3b97293c","alterego":"AlteregoConsulta","description":"Consulta","powers":["Consulta"]},{"id":651,"name":"Hero_5bc6275a-7bcd-4c58-8c4d-e5b5ffa7e8ca","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":652,"name":"Hero_f5cfbdf0-c152-402f-8af1-13f5843bfe6f","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":653,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":654,"name":"Vision Woman 221b89","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":655,"name":"anamcias","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":657,"name":"Captain America 1750434732444","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":658,"name":"Hulk 1750434733011","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":659,"name":"Black Widow 1750434733259","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":660,"name":"Thor 1750434733714","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":661,"name":"Captain America 1750434734194","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":662,"name":"Silvana Bentacourt v1-1750434738344","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":663,"name":"Black Panther","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","TecnologÃ­a"]},{"id":664,"name":"Thanor","alterego":"Jack Doson","description":"Genius Power","powers":["Armor","Flight"]},{"id":665,"name":"Iron Man Test 1750434749684","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":666,"name":"Iron Man-ca8ae162-fa01-4994-97a8-b917491af703","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":668,"name":"Blue Marvel","alterego":"AdÃ¡n Bernard Brashear","description":"Cientifico","powers":["living reactor"]},{"id":669,"name":"Iron Man Superior-8548","alterego":"Tony Stark","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":670,"name":"JaHcOiADzl","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":671,"name":"IronMan-1ef5b5f9-7c9c-4fe1-b28b-6762a589fe27","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":672,"name":"Iron Man 8ad91d8d-f4ae-4470-a041-dbbc9fc9291d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":673,"name":"Carlos Arcentales","alterego":"Developer","description":"Computer 24/7","powers":["Sitting all day"]},{"id":674,"name":"Spider-Man Test NN","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido de Marvel","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":675,"name":"andres calamaro","alterego":"calamardo","description":"cantante","powers":["aaaa","Flibbbbbght"]},{"id":676,"name":"Sonic-f30f3f75-0ae5-47b5-9cf2-65616ca4502b","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":678,"name":"CohetePlus4","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":679,"name":"Anderson Morrillo DEV # 06c29da9-e789-4ed0-896d-9b703fd82b39","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":680,"name":"Iron Man d06400bc-3bbf-48eb-89e5-32ab928e76b7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":681,"name":"Iron Marck11","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":682,"name":"Spider-Man-New-1","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido de Marvel","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":683,"name":"Anderson Morrillo DEV # 7fe66a00-8ffd-4853-9c96-a274c6067884","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":684,"name":"Iron Man Superior-7098","alterego":"Tony Stark","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":688,"name":"Sonic-bf563f0f-fb4b-4254-8cf8-0ab44728b0c8","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":689,"name":"Silver surfer","alterego":"Silver","description":"Humanoid Alien","powers":["volar","fuerza"]},{"id":690,"name":"I2_73a3f8a4-94ff-4ff2-8a56-a4132bca6948","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":691,"name":"Iron Man1913","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":692,"name":"Jose Obando 1750434857758","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":693,"name":"Anderson Morrillo DEV # a8d0f72e-508f-4c00-afc1-0d416e911fec","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":695,"name":"Iron Man-1750434870231","alterego":"Tony Stark","description":"Updated description 1750434871868","powers":["Armor","Flight"]},{"id":696,"name":"Iron Man-1750434873814","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":697,"name":"Wonder Lord 45cc01","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":698,"name":"Iron Man-1750434877435","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":699,"name":"\"; DROP TABLE characters; --","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":701,"name":"Iron Man Infernal Karate -c83db201-9f36-4ffa-8b65-69cf1ed417fd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":702,"name":"Iron Man 1750434916663","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":703,"name":"CohetePlus7","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":705,"name":"Iron Man 71cc6bdc","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":706,"name":"Iron Man abc73c30","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":708,"name":"Iron Man 10b8e6d2","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":709,"name":"Spider-Man-fi","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido de Marvel","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":710,"name":"Iron Man 7ebf883d-acd4-49ab-90f9-80925b6eb69c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":711,"name":"Captain Strange bbd0f3","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":712,"name":"Castleman","alterego":"Super castle","description":"Genius Dev","powers":["dev","qa"]},{"id":713,"name":"dSAROzEjqI","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":714,"name":"Iron Man_ebde376d-72ed-44a9-80e7-3c09ac314089","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":715,"name":"Iron Marck13","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":716,"name":"Iron Man 1750434961700","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":717,"name":"Iron Man Superior-2063","alterego":"Tony Stark","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":719,"name":"I2_73a3f8a4-94ff-4ff2-8a56-a4132bca6949","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":720,"name":"Iron Man Test Armando","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":721,"name":"ErrorServer500","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":722,"name":"Iron Man Test 1750434992629","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":723,"name":"Carlos Arcentales1","alterego":"Developer","description":"Computer 24/7","powers":["Sitting all day"]},{"id":724,"name":"Jose Obando ","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":727,"name":"HeroeConsulta_b10afd73-0a3b-4109-bddc-85b3cc8075a7","alterego":"AlteregoConsulta","description":"Consulta","powers":["Consulta"]},{"id":728,"name":"Hero_a6ddccea-e0b1-44a9-a3ca-71e19ebb4ee5","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":729,"name":"Hero_17ea9470-e103-4144-a4ca-000ff8bcde5f","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":731,"name":"Test Character 1750435001668","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":732,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":733,"name":"Test Character 1750435001909","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":735,"name":"Test Character 1750435002972","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":736,"name":"Iron Man-1750435002424","alterego":"Tony Stark","description":"Updated description 1750435003911","powers":["Armor","Flight"]},{"id":737,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":739,"name":"Test Character 1750435005711","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":740,"name":"Iron Man d79feef5-ee40-47d4-a3e0-ce8335d60fb6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":741,"name":"Super Hero Test 4181","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":742,"name":"Iron Man-1750435005758","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":743,"name":"Jose Obando 1750435006315","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":744,"name":"UIFLGPKgwd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":745,"name":"Super Hero Test 9203","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":746,"name":"Black Widow e0cecd","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":747,"name":"Iron Man-1750435009457","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":749,"name":"Iron Man ac65cd4e-f8ee-4e20-af62-807e7c6438cf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":750,"name":"Chris Muyon 91518","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":751,"name":"kramerx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":753,"name":"Capitan America Negrito 3","alterego":"Un nombre Random para el negrito 3","description":"Personaje para prueba temporal No me borren porfas","powers":["Red","Blue"]},{"id":754,"name":"Spiderman","alterego":"Peter Parker","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":755,"name":"Iron Manson","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":756,"name":"Iron Man Infernal Karate -d1835d5f-3cbd-43e6-bd76-dc54277ae3d1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":757,"name":"Thor aaf428f9-7f59-4314-b8dd-b2c8285ef0c4","alterego":"Thor","description":"Dios del trueno,","powers":["Speed","Strength"]},{"id":758,"name":"Iron Man Superior-7283-105634","alterego":"Tony Stark","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":760,"name":"Iron Man 04f157cd-fed9-42db-8154-452dfee7878c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":762,"name":"Test Character 1750435051243","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":763,"name":"Test Character 1750435051489","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":764,"name":"Test Character 1750435052509","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":765,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":766,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":768,"name":"Test Character 1750435055188","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":769,"name":"Iron Man 1750435054915","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":770,"name":"I2_af1ef636-6b7a-4753-9c3c-3193eddc46ce","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":771,"name":"Iron Man ebbcd79c-585d-4589-a191-41738c3092dd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":772,"name":"Spider Boby 2","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":773,"name":"Iron Man-8448985f-b485-41e9-a251-30c84c558927","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":774,"name":"Iron Man-1750435078065","alterego":"Tony Stark","description":"Updated description 1750435079527","powers":["Armor","Flight"]},{"id":775,"name":"Vision Panther a27469","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":776,"name":"Iron Man-1750435081593","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":777,"name":"Silvana Bentacourt v1-1750435076039","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":778,"name":"Jose Obando 1750435083490","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":779,"name":"Iron Man-1750435085457","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":781,"name":"IronFb60a86288-3a35-4318-8c1e-073df5c90941","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":782,"name":"Iron Man_4238bc3a-d63a-42d6-8efd-4bfe2dad81d5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":783,"name":"Iron Man Test 1750435097303","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":784,"name":"Ghost Rider JC2","alterego":"Ghost Rider JC2","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":786,"name":"Jose Obando 1750435106152","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":787,"name":"Test Character 1750435106752","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":788,"name":"Test Character 1750435106996","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":789,"name":"Test Character 1750435108042","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":790,"name":"Super Hero Test 9086","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":791,"name":"Spider Boby 3","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":792,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":793,"name":"IronMan-126b29a8-0b98-4414-9242-f2b3202ad522","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":794,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":796,"name":"Test Character 1750435110732","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":798,"name":"Bryan Carrillo","alterego":"bcarrill","description":"Test","powers":["Armor","Flight"]},{"id":799,"name":"IronFbabe5eb93-b119-4003-aa3b-e4ae1f7b35f3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":800,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":802,"name":"Captain America 1750435170454","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":803,"name":"Hulk 1750435171053","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":804,"name":"Black Widow 1750435171297","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":805,"name":"Thor 1750435171760","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":806,"name":"Captain America 1750435172222","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":807,"name":"Test Character 1750435187058","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":808,"name":"Test Character 1750435187307","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":809,"name":"Test Character 1750435188383","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":810,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":812,"name":"Test Character 1750435191161","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":813,"name":"Sonic-84ccc118-4255-43fe-b0df-aa0aa7e2030f","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":814,"name":"Franky","alterego":"Frank  GÃ³mez","description":"Genius Power","powers":["Dev","soft-skills"]},{"id":815,"name":"Iron Man ca034017-2379-40d2-9abd-b3c4ebd65e3d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":816,"name":"Iron Man1915","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":817,"name":"Test Character 1750435202583","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":818,"name":"Test Character 1750435202829","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":819,"name":"Test Character 1750435203924","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":820,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":822,"name":"Test Character 1750435206724","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":823,"name":"Test Character 1750435219684","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":824,"name":"Test Character 1750435219930","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":825,"name":"Test Character 1750435221013","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":826,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":828,"name":"IronMan-93bc5862-b995-4936-a2af-6fc972ea6781","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":829,"name":"Test Character 1750435223803","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":831,"name":"Iron Man 7721ce9c-78ee-4e05-ba5a-60e804794866","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":832,"name":"Sonic-d82cc6b3-cf99-4ba1-8f74-565a3d43d021","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":833,"name":"chleona","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":834,"name":"Edulima","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":835,"name":"Captain America 1750435236281","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":836,"name":"Hulk 1750435236908","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":837,"name":"Black Widow 1750435237144","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":838,"name":"Thor 1750435237605","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":839,"name":"Captain America 1750435238033","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":840,"name":"Iron Man_R1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":841,"name":"Doctor Woman 3ba7c0","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":842,"name":"Edulima 1","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":843,"name":"Franky2 GÃ³mez C","alterego":"Frank  GÃ³mez 2","description":"Foundation Power","powers":["Dev","soft-skills","QA"]},{"id":844,"name":"Rein Batman","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":845,"name":"Iron Man 3281ece1-88b7-4831-8871-d15bcc2f324c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":846,"name":"Test Character 1750435267087","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":847,"name":"Test Character 1750435267352","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":848,"name":"Test Character 1750435268438","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":849,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":851,"name":"Test Character 1750435271239","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":852,"name":"Iron Maidens","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":854,"name":"Iron Man Rafael6yysg6ot","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":855,"name":"Juanceva","alterego":"Juan Carlos Cevallos","description":"A superhero with new abilitios of fast flight and enhanced armor.","powers":["Armor","Flight"]},{"id":856,"name":"Iron Man Rafael5nbh0li3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":857,"name":"iMaMgUYCAQ","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":858,"name":"Iront Man tstttttt","alterego":"Tony Stark tst4","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":859,"name":"CHAPULIN COLORADO","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":861,"name":"Iron Man 11223","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":863,"name":"Sonic-2096ccde-28e7-4c6e-b795-dc18b7c693f1","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":864,"name":"Iron Man-5e71719b-7c06-4e73-abd7-895d8d16ee1c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":865,"name":"Rein Batman 1","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":866,"name":"Iron Man #9015","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":867,"name":"Prueba Pichincha0dcd3e56-9121-4274-bbe9-3cd421c4e7a7781","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":868,"name":"Black America b95dfc","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":869,"name":"Iron Man 1750435332795","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":870,"name":"Iron Man #2090","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":871,"name":"Iron Man 1750435334408","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":873,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":874,"name":"Iron Man Rafaelps49a20y","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":875,"name":"IronMan-e9dc335f-2cb5-4994-b31b-b45479436c30","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":876,"name":"Iron Man Infernal Karate -1b349934-1c76-4789-93ed-86df94b3bab6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":877,"name":"Super Hero Test 500","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":878,"name":"1Iron Man_r1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":879,"name":"Iron Man Infernal Karate -5dbe5bd6-1ad7-4c94-91f2-53b8e16f3080","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":880,"name":"Super Hero Test 1069","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":881,"name":"Iron Man Rafael6y96my8l","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":882,"name":"Iron Man f6e38507-5f82-49ef-95c3-8e3b4cab62eb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":883,"name":"Iron Man e75d7000-77dd-4ddc-acfd-f64ecaf5b277","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":884,"name":"Iron Man f168694c-c735-4e5d-a858-a741c71a5b33","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":885,"name":"Iron Man ee9f8afc-2391-4396-b7b6-7b9135876080","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":886,"name":"Iron Man e24e3542-c156-4d4e-a6e6-4c7a3bbfe9ce","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":887,"name":"Iron Man 89f5ee02-debd-4ea9-bcf7-90527151df4f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":888,"name":"Iron Man f62165cd-b4f6-4f1d-a4f8-d9ba01fb3854","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":889,"name":"Iron Man effa79f7-455e-47ac-97fc-248c26e51f84","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":890,"name":"Iron Man dc193517-a24d-4c48-8404-78a6ef9ac947","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":892,"name":"Iron Man_c8c4114f-954a-4157-b3d6-1f96d47000c0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":894,"name":"I2_5a9b1ce5-1928-4df3-9a33-6feff687d6be","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":895,"name":"Iron Marck14","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":897,"name":"2Iron Man_R1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":898,"name":"Captain America 1750435378758","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":899,"name":"Hulk 1750435379415","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":900,"name":"Iron Man 77645bb2-47c6-46da-95c8-2f7bbb3cd427","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":901,"name":"Nuevo Personaje #2088","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":902,"name":"Black Widow 1750435381094","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":903,"name":"Thor 1750435382825","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":904,"name":"Thors","alterego":"Rayo Man","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":905,"name":"Captain America 1750435384507","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":907,"name":"CohetePlus8","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":908,"name":"Prueba Pichinchaf6587085-7bb9-4ede-9697-0210ca87ac471007","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":909,"name":"Prueba Pichincha3c2bd79a-9c44-44f2-95e7-ff2489e2076d9887","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":910,"name":"Super Hero Test 8635","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":911,"name":"Super Hero Test 8202","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":912,"name":"2Iron Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":913,"name":"Iron Man Infernal Karate -55a18ae7-63dd-495e-a816-d69d36054423","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":914,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":916,"name":"CAPULINA","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":917,"name":"Thors2","alterego":"Rayo Man","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":918,"name":"CohetePlus5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":919,"name":"Hulk2","alterego":"Si Recuerdo","description":"Updated Description","powers":["Armor","Flight"]},{"id":920,"name":"Iron Man Test 1750435448017","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":922,"name":"Diego1 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":923,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":924,"name":"Iron Man f334567c-af75-47cf-88bc-036551b99974","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":925,"name":"Iron Man 3a122aeb-0fd7-4e7e-a411-0e0c94a668eb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":926,"name":"Iron Man 82830233-5a04-4d58-9267-aaa9e5c0187c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":927,"name":"Iron Man f38e92b0-5ea3-4b5b-8e84-9a1fc2dc4409","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":928,"name":"Iron Man 569c2346-df86-46e9-8ca4-491fbee99fbf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":929,"name":"Iron Man 6ce4dd6e-0bb8-4e29-8a99-f16a999838d2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":930,"name":"Iron Man eaac79c8-540c-4fe0-9b82-ea916bad1088","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":931,"name":"Iron Man 80ddece7-2c23-4570-8679-62bd36e4a0fe","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":932,"name":"Iron Man 269a2031-06df-4f74-a80e-862231ca277f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":934,"name":"Iron Man Rafaeldcollyfk","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":935,"name":"I2_1e9986da-8cce-4898-beba-ec3248e46508","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":938,"name":"Anderson Morrillo DEV # a15932ce-0317-402b-bcfa-895b16dd4d19","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":939,"name":"Iron Man Duplicate 1750435476808","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":940,"name":"Spider-Man 426","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido arÃ¡cnido","Trepar paredes","Lanzar telaraÃ±as"]},{"id":941,"name":"Spider-Man 362","alterego":"Otro","description":"Otro","powers":["Sentido arÃ¡cnido"]},{"id":942,"name":"CohetePlus9","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":944,"name":"Iron Man Test 1750435503409","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":945,"name":"Laly","alterego":"Gladys Ronquillo","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":946,"name":"Iron Man v23","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":947,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":948,"name":"Rein Batman be527396-34e6-4733-bcb3-7f4e575e94e8","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":949,"name":"CohetePlus9","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":950,"name":"Iron Man 857abe15-57b3-4061-9b8b-2926081f3688","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":951,"name":"Iron Man 2ef32151-1370-468f-8635-422d69d5db81","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":952,"name":"Iron Man 3700e2fb-6099-454d-acdd-4112cd6dd972","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":953,"name":"Iron Man 5048f434-9232-44e9-aa53-95aa122880a1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":954,"name":"Iron Man 87ba32a7-1465-4037-9383-05dee9d20fe6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":955,"name":"Iron Man 2cfc22cf-00fe-42af-ae3a-3541e6ccee6f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":956,"name":"Iron Man def5622c-993c-4ed9-ad7a-0c9e2a67e5f3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":957,"name":"Iron Man e1929de8-92e8-4819-ac53-de723c2fb1c7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":958,"name":"Iron Man 600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":959,"name":"Iron Man 884","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":960,"name":"Iron Man 122","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":961,"name":"Iron Man 790","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":962,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":963,"name":"Nombre-25774c23-7a4d-4c00-98b8-d1b1e991ffcb","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":964,"name":"Iron Man 255","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":965,"name":"Silvana Bentacourt v1-1750435519164","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":967,"name":"Iron Man 572","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":969,"name":"Iron Man 77f92d27-108f-4b11-bb40-e8404bdcb55c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":970,"name":"Nuevo Personaje #1143","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":971,"name":"Prueba Pichincha872bfa00-6f0f-426a-adc1-87687a9a5d4a256","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":972,"name":"Prueba Pichinchae131f0c1-b584-47c5-af37-2b68d033c2ec6690","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":973,"name":"Castleman_1","alterego":"Super castle_1","description":"Genius Dev_1","powers":["dev_1","qa_1"]},{"id":974,"name":"Anderson Morrillo DEV # 3c3f54e0-4c47-4a80-887d-f59b0a7a514f","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":975,"name":"CapitanAmerica001","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":976,"name":"Rein Batman 769fa36c-5dc2-47ea-a2bf-b1ad4c67b8ee","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":977,"name":"Anderson Morrillo DEV # f1feca28-dc56-416c-b8f5-a61f9fe0dbe8","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":978,"name":"Super Hero Test 2617","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":979,"name":"Super Hero Test 9135","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":981,"name":"Franky Gomez Cabrera","alterego":"Frank GÃ³mez C","description":"Genius Power","powers":["Dev","soft-skills"]},{"id":982,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":983,"name":"Jose Obando 1750435566458","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":985,"name":"Eduardo Shigui","alterego":"Edu","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":986,"name":"Spider Lord df55d2","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":987,"name":"I2_3b5b46de-51eb-4041-925d-259780f87b20","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":989,"name":"Iron Man Test 1750435576582","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":990,"name":"Iron Man Gabriel chanchay","alterego":"Tony Stark","description":"Test Gabriel Chanchay","powers":["Armor","Flight"]},{"id":991,"name":"Super Hero Test 7962","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":992,"name":"Iron Man-32d2bb49-e3fd-44bb-99a9-eb4f9f32ff4d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":994,"name":"Iron Man 1c576f86-eba8-42bc-beb6-822436077093","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":995,"name":"Jose Obando 1750435587942","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":997,"name":"Captain America 1750435585271","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":998,"name":"Hulk 1750435585869","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1002,"name":"Captain America 1750435590694","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1003,"name":"Alexis Name 1","alterego":" Alexis Alterego 1","description":" Alexis Description 1","powers":["Armor","Flight"]},{"id":1004,"name":"Alexis Name 2","alterego":" Alexis Alterego 2","description":" Alexis Description 2","powers":["Armor","Flight"]},{"id":1005,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1006,"name":"Invincible","alterego":"Mark Grayson","description":"Viltrumite","powers":["String","Flight"]},{"id":1007,"name":"Captain America 1750435608323","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1008,"name":"Hulk 1750435608927","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1009,"name":"Black Widow 1750435610401","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1010,"name":"Iron Man 3243243243232423","alterego":"Tony Stark","description":"Updated description for testing","powers":["Armor","Flight"]},{"id":1011,"name":"Nuevo Personaje #9922","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1013,"name":"Anderson Morrillo DEV # 5abf852f-9ad6-41d1-b5ff-7c16a8a17b0a","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":1014,"name":"Iron Maan","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1016,"name":"Jose Obando 1750435623722","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1018,"name":"CAPULINA 1","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1019,"name":"Iron Man xxxx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1020,"name":"Prueba Pichincha691ae3a7-8628-4066-b2c1-4391ca34b68d2724","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1021,"name":"Iron Man Infernal Karate -519965a3-c172-4aaf-b396-8e3620e6403d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1022,"name":"Prueba Pichinchabb5c576d-1a38-460b-9558-1d66cae834c74783","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1023,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1024,"name":"Iron Man","alterego":"Tony Stark","description":"Updated descriptionm8vj42cf","powers":["Armor","Flight"]},{"id":1026,"name":"Iron Man 17630fe0-4d95-453d-a1b8-dfaf0c2ce600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1027,"name":"kvViVETsCu","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1028,"name":"Iron Man 22ac5d96-b9d8-4e27-b6ce-47595f4437f7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1029,"name":"Iron Man-9cbb33ef-c262-4f15-9fb1-4c8a009b20d2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1030,"name":"Capitan America-998ff266-e951-4137-ba7c-800a42105de0","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1031,"name":"Nuevo Personaje #8482","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1032,"name":"Iron Man Test 1750435660148","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1033,"name":"Black Panther 9e151d01-072b-43e2-9bc1-1d14213d301c","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","TecnologÃ­a"]},{"id":1034,"name":"Iron Man 1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1035,"name":"Black Panther 7abc858a-d9f3-4fb2-812c-f17d8bead885","alterego":"T'Challa","description":"Actualizado desde Karate Pro","powers":["Fuerza","TecnologÃ­a"]},{"id":1036,"name":"Jose Obando 1750435669712","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1039,"name":"Iron Man Rafaelhuk5tg0w","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1040,"name":"Super Rein 0bf64ce1-df70-4ba5-bdfd-a711ef2f2a06","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1041,"name":"Jose Obando 1750435693501","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1043,"name":"Iron Man 0c98d5ab-b5d3-4f38-97df-13d34e82bcaa","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1044,"name":"Iron Man 1750435705600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1045,"name":"Iron Man 1750435707067","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1047,"name":"Iron Man Rafaelfy5twhmo","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1050,"name":"Duplicate 1750435710748","alterego":"Alguien","description":"DescripciÃ³n","powers":["Poder"]},{"id":1052,"name":"Iron Man 1750435714411","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1054,"name":"Iron Man Test 1750435720321","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1055,"name":"Prueba Pichincha6b7a5d34-99cc-4829-9447-2f5977708b83689","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1056,"name":"Prueba Pichinchade71b3f1-7ce9-4c1b-8bde-8f31397be9d36628","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1058,"name":"Hero_322f11d1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1059,"name":"Iron Man_9d337d0a-262b-4fd9-9380-93b8596bd9e9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1060,"name":"Super Hero Test 6920","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1063,"name":"Chris Muyon","alterego":"updated alterego","description":"Updated description","powers":["Armor","Flight"]},{"id":1064,"name":"Iron Man-ade018d2-e3a3-4744-8187-9059a357d850","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1065,"name":"Capitan America-afe9e1d7-6849-47a0-999f-bd1577a4ffab","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1066,"name":"Edulima 2","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1067,"name":"Chapulin colorado Test Karate","alterego":"Roberto Gomez","description":"HÃ©roe ficticio mexicano","powers":["agilidad","sentido del humor","hacer reir"]},{"id":1068,"name":"Prueba Pichincha7d361762-d9c2-43d4-b9c9-b95aa746fa9b5445","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1069,"name":"Prueba Pichincha1f9c29a8-2d77-4572-91cf-ca4744a2875d6299","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1070,"name":"Diego Iron Man 7253","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1071,"name":"Iron Man dc8af850-c952-41fb-9322-ae009d4e74e0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1072,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1073,"name":"Spider Boby 4","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":1074,"name":"I2_67c77687-9059-4f39-8d56-03b06a1609ef","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1075,"name":"Captain America","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1076,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1078,"name":"Hulk3","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1079,"name":"Iron Man b591afb4-f9c8-4144-b65b-349a790804dc","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1080,"name":"Hulk4","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1081,"name":"Iron Man Infernal Karate -b4c462ad-84ae-4ca7-a640-9cea46e7b1ba","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1082,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1084,"name":"Iron Man2222","alterego":"Tony Stark2","description":"Genius billionaire2","powers":["Armor","Flight"]},{"id":1086,"name":"Hulk5","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1087,"name":"Iron Man Superior-9467-110913","alterego":"Tony Stark","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":1089,"name":"Super Rein 29a8d8be-5a94-43fc-9e9c-719bcfb4d00b","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1090,"name":"Castleman_2","alterego":"Super castle_2","description":"Genius Dev_2","powers":["dev_2","qa_2"]},{"id":1092,"name":"Iron Man 9d1e9be5-eef9-4207-a7e2-e96ea0921860","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1094,"name":"Hero_22bc49d9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1095,"name":"Nombre-5e067d49-f7a2-474d-b273-e798742c16e0","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1097,"name":"Iron Man-e1b4ba5e-bfd8-4c1e-9b86-ed1933082bdd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1098,"name":"Capitan America-2f7ca7fa-93d6-49e1-b0f0-2556a09e7b9e","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1099,"name":"Jose Obando 1750435816482","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1101,"name":"Iron Man1233333","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1103,"name":"anamcias1","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1104,"name":"Prueba Pichincha2efe7301-ce82-492e-ab9b-50a9fe0adcb36189","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1105,"name":"Prueba Pichincha04d9f706-f1c5-4705-885a-bf20263bef011287","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1106,"name":"Super Rein 68b92e31-ea35-4577-9ff9-138673e31b22","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1107,"name":"Super Rein 70f9899c-80b8-49cc-83e7-e433dcb6ac0b","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1109,"name":"Iron Man two","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1110,"name":"3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1111,"name":"Nuevo Personaje #9824","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1112,"name":"Jose Obando 1750435849382","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1114,"name":"Captain America d3cb53","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1115,"name":"Nombre-2d21ad37-6f9c-4eb1-92bb-f38d4da61760","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1116,"name":"Nombre-a7f42db6-7550-42ce-8e56-d3f7d5946458","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1117,"name":"Nombre-15bec9d5-27af-47ab-b58f-ee54ccbd6084","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1118,"name":"Hombre araÃ±a","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1119,"name":"Nuevo Personaje #2607","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1120,"name":"Iron Man Superior-2164-111009","alterego":"Tony Stark","description":"Genio, millonario, playboy, filÃ¡ntropo","powers":["Armadura","Inteligencia"]},{"id":1124,"name":"Iron Man 1 4re455","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1125,"name":"Jose Obando 1750435870292","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1127,"name":"Super Rein b4faa4b3-13d2-44b0-a8c5-5cdfb5449116","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1128,"name":"Super Rein 508c03ab-b31e-4298-81b0-2bfb01734627","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1129,"name":"IronMan-831a4736-592c-43cb-8523-4a3c24655cef","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1131,"name":"Captain America 1750435884866","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1132,"name":"Prueba Pichinchae2e03dc4-7a1d-4dcc-8d16-f950e6f122ab1502","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1133,"name":"Hulk 1750435885462","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1134,"name":"Black Widow 1750435886926","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1135,"name":"Thor 1750435888605","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1136,"name":"Captain America 1750435890278","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1137,"name":"Iron Man Infernal Karate -d40d9b46-a7b7-48b5-ba1c-b03a42c016dc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1138,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1139,"name":"Jose Obando 1750435898657","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1140,"name":"Iron Man Rafaelviwn05if","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1141,"name":"Iron Man Rafael55dbqoov","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1142,"name":"Diego Iron Man 7911","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1143,"name":"Captain America","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1144,"name":"I2_ea6d33db-a484-4793-b428-9947eb7e213d","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1146,"name":"Jose Obando 1750435911382","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1149,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1150,"name":"FttvFklngc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1151,"name":"Iron Man 1a01a65f-a13d-4bf6-9283-8297b09956d4","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1152,"name":"Iron Man 9e9e7604-700b-46d8-8056-4fd338b4477d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1154,"name":"Captain Marvel test8","alterego":"Carol Danvers","description":"the biggest hero in the world","powers":["Flight","Force"]},{"id":1155,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1156,"name":"Iron Man Test 1750435943066","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1158,"name":"Nombre-58b8d2d7-212b-41dc-bee2-e53c0374772a","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1159,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1162,"name":"nGIosGQXqY","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1163,"name":"IronMan-8968bd7e-8585-47f6-9f2b-2c98ce1e4059","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1164,"name":"Iron Man 7cfd0920-6978-4ca4-b184-d9376ba4559e","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1167,"name":"Iron Witch be8d82","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1168,"name":"Atom Eve","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1169,"name":"Castleman_3","alterego":"Super castle_3","description":"Genius Dev_3","powers":["dev_3","qa_3"]},{"id":1171,"name":"CapitÃ¡n Marvel","alterego":"Carol Danvers","description":"HeroÃ­na cÃ³smica actualizada","powers":["Vuelo","EnergÃ­a","Superfuerza"]},{"id":1172,"name":"Iron Man-826600bd-964a-468f-8c53-1636f6bf010b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1173,"name":"Capitan America-a0c1af29-ad1f-47a3-a885-7baf335e2d59","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1174,"name":"Captain America 1750436007197","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1175,"name":"Thor Strange f68f9e","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1176,"name":"Hulk 1750436008045","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1177,"name":"Black Widow 1750436009546","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1178,"name":"Thor 1750436011524","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1179,"name":"Captain America 1750436013150","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1180,"name":"IronMan-181c10c6-8875-4443-a41f-9d7d4dd0004c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1181,"name":"Super Rein 6128655f-cd52-496c-9c1d-ea3f6f4d1745","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1182,"name":"Jose Obando 1750436035150","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1183,"name":"Iron Man 2234","alterego":"Tony Stark 2234","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1184,"name":"Iron Man f6f810c8-e6e5-4743-8f21-6507cb253737","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1185,"name":"error500","alterego":"Tony Stark 2234","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1187,"name":"Iron Man1111","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1188,"name":"Iron Man Infernal Karate -f79eefe3-8864-40ad-a45d-ffa9e7e19fc5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1189,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1191,"name":"Jose Obando 1750436049611","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1194,"name":"Iron Man Test 1750436056434","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1195,"name":"Iron Man Pedro","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1196,"name":"Castleman_4","alterego":"Super castle_4","description":"Genius Dev_4","powers":["dev_4","qa_4"]},{"id":1198,"name":"Jose Obando 1750436064363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1200,"name":"Iron Man test - aandino","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":1202,"name":"Silvana Bentacourt v1-1750436070985","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1203,"name":"CAPULINA _1","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1206,"name":"Nombre-82ea5e18-1f10-4512-bba7-1f5d8300507f","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1207,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1209,"name":"IronMan-5e255b9f-b537-42a1-a567-7121fa8e9b2b","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1211,"name":"Heroe BP","alterego":"Developer","description":"Genio developer","powers":["Testing","Coding"]},{"id":1212,"name":"Captain Marvel test9","alterego":"Carol Danvers","description":"Updated description","powers":["Flight","Force"]},{"id":1213,"name":"Jose Obando 1750436097345","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1214,"name":"Hero_edd03de4","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1216,"name":"Iron Man Rafaelv7wlxq55","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1217,"name":"Nuevo Personaje #1647","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1219,"name":"Jose Obando 1750436108636","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1220,"name":"Henry Moreno","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1221,"name":"Hulk 11750435885462","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1222,"name":"Doctor Strange 4421b8","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1224,"name":"CohetePlus10","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":1225,"name":"Deadpool jusimban312","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano?? y antihÃ©roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":1227,"name":"I2_35899795-4f6d-4b57-98e0-f0efca8f8a20","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1228,"name":"Marvel Gold Goblin","alterego":"Boby Osborn","description":"Student","powers":["Armor","Speed"]},{"id":1229,"name":"Iron Man Rafaelq108vy9u","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1232,"name":"Thor Hero d5ab3a","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1233,"name":"Iron Man Rafaelnwjg9787","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1234,"name":"Super Hero Test 6061","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1236,"name":"Super Hero Test 3459","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1237,"name":"jhazapat","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1239,"name":"Iron Man four","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1240,"name":"CAPULINA _2","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1241,"name":"Edulima 3","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1242,"name":"Jose Obando 1750436179254","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1243,"name":"Spider-Man 336","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido arÃ¡cnido","Trepar paredes","Lanzar telaraÃ±as"]},{"id":1244,"name":"Spider-Man 249","alterego":"Otro","description":"Otro","powers":["Sentido arÃ¡cnido"]},{"id":1245,"name":"Iron Man Rafael3mmjn0c2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1246,"name":"I2_1e999e6f-910d-406d-8117-566ee130cd80","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1248,"name":"Dario Jimenez","alterego":"Fresco","description":"Genius billionaire","powers":["Super Strength","Flight"]},{"id":1249,"name":"Ariel Arnedo","alterego":"AArnedo","description":"Developer","powers":["Java"]},{"id":1250,"name":"Nuevo Personaje #7602","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1252,"name":"Iron f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1253,"name":"Iron Man 22345","alterego":"Tony Stark 22345","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1255,"name":"Iron Man Rafaelzcc0bgm3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1257,"name":"El pepes","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1260,"name":"Test User 555bd231-8482-441f-b0d8-cd5271b2a461","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1262,"name":"Character-5b78817d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1264,"name":"Character-1b14c2c9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1266,"name":"Iron Maiden 5","alterego":"Tony Mayor","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1267,"name":"Character-986b2129","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1268,"name":"Iron Man-9ee08370-fada-4dff-98f3-62374a39d806","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1269,"name":"Freddy Tacuri","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1270,"name":"chilindrina","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1271,"name":"Iron Man-94e992b9-d4e1-43f6-9291-b3cf8ca1f954","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1272,"name":"Capitan America-198ffc37-5aaf-4c8f-989e-9c11a0104c1c","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1273,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1275,"name":"Character-2ae7316f","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1276,"name":"Error","alterego":"Error","description":"Error","powers":["Error"]},{"id":1278,"name":"Jose Obando 1750436255862","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1279,"name":"Nuevo Personaje #1365","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1281,"name":"Black Panther 0bba45bc-fb53-45aa-b275-c44a0ded2b70","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","TecnologÃ­a"]},{"id":1282,"name":"Chleona3","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1283,"name":"Black Panther d6be0872-7e26-4373-b303-e3cec93ffb70","alterego":"T'Challa","description":"Actualizado desde Karate Pro","powers":["Fuerza","TecnologÃ­a"]},{"id":1284,"name":"Iron Man 4b400a30-fc3e-4db4-b3ba-973fd2d278ce","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1287,"name":"qnNAZGzSWh","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1288,"name":"#(name)","alterego":"#(alterego)","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1289,"name":"nameRandom","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1290,"name":"Chleona4","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1291,"name":"Spider-Manew","alterego":"Peter Parker","description":"SuperhÃ©roe arÃ¡cnido de Marvel","powers":["Agilidad","Sentido arÃ¡cnido","Trepar muros"]},{"id":1292,"name":"Anderson Morrillo DEV # 60c81113-e829-4172-941d-964a3eb233a0","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":1295,"name":"Captain America 1750436297497","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1296,"name":"Hulk 1750436298248","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1298,"name":"Black Widow 1750436299811","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1299,"name":"Thor 1750436301519","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1300,"name":"Captain America 1750436303220","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1301,"name":"Iron Fist","alterego":"Danny Rand","description":"Embodies the power of Shou Lao","powers":["Glogin fist","Strenght"]},{"id":1302,"name":"Prueba Pichinchaa2d854e2-e4f9-4f94-885b-efcb7b4c4eac5836","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1303,"name":"Iron Man8888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1304,"name":"Spider-Man-9732f352-5d73-49e1-8ab8-7c5c14e0de08","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":1305,"name":"Iron Man-7104bc90-f6be-4118-9e0a-88bde90adfd3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1306,"name":"Iron Man-b92a87a2-76a0-47f3-b85b-101c152fb5b9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1307,"name":"Capitan America-5c2be5bb-ce14-4672-9b22-d460bfb7bf2d","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1308,"name":"Iron Man five","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1309,"name":"IronMan-760ef4ff-ff4d-4fad-be51-fa741ef28c42","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1310,"name":"Jose Obando 1750436332592","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1311,"name":"Iron Man_12d0076b-8547-4da8-a12a-027440918f23","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1312,"name":"wVDNiCqyfr","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1314,"name":"Vero","alterego":" Vero","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1315,"name":"Diego Iron Man 8347","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1316,"name":"Iron Man88888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1317,"name":"VerÃ³nica","alterego":"Vero","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1319,"name":"Verito","alterego":"Vero","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1321,"name":"Nuevo Personaje #4192","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1322,"name":"Prueba Pichincha55d72aa8-ce43-4aab-8342-0c1a777269a79919","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1324,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1325,"name":"Iron Man888888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1326,"name":"IronMan-30014040-40b3-4357-8131-835a25cacb43","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1327,"name":"globalName","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1328,"name":"Ghost Rider JC #(random)","alterego":"Ghost Rider JC2","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":1330,"name":"Iron Man eca5a6be-6275-4ae7-8966-e1e9517c5c36","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1332,"name":"Super Hero Test 4977","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1333,"name":"Super Hero Test 5990","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1335,"name":"Super Hero Test 8050","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1336,"name":"Jose Obando 1750436371589","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1337,"name":"Carmita","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1338,"name":"Diego Iron Man 5950","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1339,"name":"Iron Man c115eed6-9993-48c1-8bc7-85c85a8f10d7","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1341,"name":"Character_1750436400790","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1343,"name":"Diego Iron Man 312","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1344,"name":"Nombre-40980860-67f2-4164-856b-886eb56c23af","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1345,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1347,"name":"Mario1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1348,"name":"Iron Man_e06abffa-f93b-4ad0-899d-75eb870ee4dc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1349,"name":"Hero_e7fc984a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1352,"name":"Super Hero Test 6910","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1353,"name":"Super Hero Test 8267","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1355,"name":"Super Hero Test 4230","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]}]

11:20:32.625 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
11:20:32.662 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
11:20:32.662 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
11:20:32.662 [Test worker] DEBUG com.intuit.karate -- request:
1 > GET http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/55
1 > Content-Type: application/json
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
1 > Accept-Encoding: gzip,deflate


11:20:32.662 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
11:20:32.662 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 1][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:32.662 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
11:20:32.662 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/54.165.58.209:80
11:20:32.771 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.18.45:42401<->54.165.58.209:80
11:20:32.771 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-1: set socket timeout to 30000
11:20:32.771 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request GET /testuser/api/characters/55 HTTP/1.1
11:20:32.771 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
11:20:32.771 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
11:20:32.771 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> GET /testuser/api/characters/55 HTTP/1.1
11:20:32.771 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> Content-Type: application/json
11:20:32.771 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
11:20:32.771 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> Connection: Keep-Alive
11:20:32.771 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
11:20:32.771 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> Accept-Encoding: gzip,deflate
11:20:32.774 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "GET /testuser/api/characters/55 HTTP/1.1[\r][\n]"
11:20:32.774 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "Content-Type: application/json[\r][\n]"
11:20:32.774 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
11:20:32.774 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "Connection: Keep-Alive[\r][\n]"
11:20:32.774 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)[\r][\n]"
11:20:32.774 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "Accept-Encoding: gzip,deflate[\r][\n]"
11:20:32.780 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "HTTP/1.1 200 [\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Server: Cowboy[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436432&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=3KbBid8c1ktgp4W2GF7qI%2BIGHOAjb1PezgXFEH7SS5k%3D"}]}[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436432&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=3KbBid8c1ktgp4W2GF7qI%2BIGHOAjb1PezgXFEH7SS5k%3D[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Connection: keep-alive[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Content-Type: application/json[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Transfer-Encoding: chunked[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Date: Fri, 20 Jun 2025 16:20:32 GMT[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Via: 1.1 vegur[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "7f[\r][\n]"
11:20:32.881 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "{"id":55,"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]}[\r][\n]"
11:20:32.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << HTTP/1.1 200 
11:20:32.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Server: Cowboy
11:20:32.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436432&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=3KbBid8c1ktgp4W2GF7qI%2BIGHOAjb1PezgXFEH7SS5k%3D"}]}
11:20:32.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436432&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=3KbBid8c1ktgp4W2GF7qI%2BIGHOAjb1PezgXFEH7SS5k%3D
11:20:32.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
11:20:32.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Connection: keep-alive
11:20:32.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Content-Type: application/json
11:20:32.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Transfer-Encoding: chunked
11:20:32.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Date: Fri, 20 Jun 2025 16:20:32 GMT
11:20:32.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Via: 1.1 vegur
11:20:32.884 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
11:20:32.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "0[\r][\n]"
11:20:32.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "[\r][\n]"
11:20:32.884 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 1][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
11:20:32.884 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-1: set socket timeout to 0
11:20:32.884 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 1][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:32.884 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
11:20:32.884 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-1: Close connection
11:20:32.884 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
11:20:32.885 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 222
1 < 200
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436432&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=3KbBid8c1ktgp4W2GF7qI%2BIGHOAjb1PezgXFEH7SS5k%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436432&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=3KbBid8c1ktgp4W2GF7qI%2BIGHOAjb1PezgXFEH7SS5k%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 16:20:32 GMT
1 < Via: 1.1 vegur
{"id":55,"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]}

11:20:32.887 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['id']
11:20:32.887 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['name']
11:20:32.902 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
11:20:32.902 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
11:20:32.902 [Test worker] DEBUG com.intuit.karate -- request:
1 > GET http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/-999
1 > Content-Type: application/json
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
1 > Accept-Encoding: gzip,deflate


11:20:32.902 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
11:20:32.902 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 2][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:32.902 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
11:20:32.902 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/54.165.58.209:80
11:20:33.003 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.18.45:42402<->54.165.58.209:80
11:20:33.003 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-2: set socket timeout to 30000
11:20:33.003 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request GET /testuser/api/characters/-999 HTTP/1.1
11:20:33.003 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
11:20:33.003 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
11:20:33.003 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 >> GET /testuser/api/characters/-999 HTTP/1.1
11:20:33.003 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 >> Content-Type: application/json
11:20:33.003 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
11:20:33.003 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 >> Connection: Keep-Alive
11:20:33.003 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
11:20:33.003 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 >> Accept-Encoding: gzip,deflate
11:20:33.003 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "GET /testuser/api/characters/-999 HTTP/1.1[\r][\n]"
11:20:33.003 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "Content-Type: application/json[\r][\n]"
11:20:33.003 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
11:20:33.003 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "Connection: Keep-Alive[\r][\n]"
11:20:33.003 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)[\r][\n]"
11:20:33.003 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "Accept-Encoding: gzip,deflate[\r][\n]"
11:20:33.003 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "[\r][\n]"
11:20:33.112 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "HTTP/1.1 404 [\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Server: Cowboy[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Connection: keep-alive[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Content-Type: application/json[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Transfer-Encoding: chunked[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Date: Fri, 20 Jun 2025 16:20:33 GMT[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Via: 1.1 vegur[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "1f[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "{"error":"Character not found"}[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << HTTP/1.1 404 
11:20:33.115 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Server: Cowboy
11:20:33.115 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}
11:20:33.115 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D
11:20:33.115 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
11:20:33.115 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Connection: keep-alive
11:20:33.115 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Content-Type: application/json
11:20:33.115 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Transfer-Encoding: chunked
11:20:33.115 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Date: Fri, 20 Jun 2025 16:20:33 GMT
11:20:33.115 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Via: 1.1 vegur
11:20:33.115 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "0[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "[\r][\n]"
11:20:33.115 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 2][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
11:20:33.115 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-2: set socket timeout to 0
11:20:33.115 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 2][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:33.115 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
11:20:33.115 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-2: Close connection
11:20:33.115 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
11:20:33.115 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 213
1 < 404
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 16:20:33 GMT
1 < Via: 1.1 vegur
{"error":"Character not found"}

11:20:33.117 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
11:20:33.144 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
11:20:33.166 [Test worker] DEBUG io.netty.util.internal.logging.InternalLoggerFactory -- Using SLF4J as the default logging framework
11:20:33.166 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- -Dio.netty.noUnsafe: false
11:20:33.166 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- Java version: 17
11:20:33.166 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- sun.misc.Unsafe.theUnsafe: available
11:20:33.166 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- sun.misc.Unsafe.copyMemory: available
11:20:33.166 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- sun.misc.Unsafe.storeFence: available
11:20:33.166 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- java.nio.Buffer.address: available
11:20:33.170 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- direct buffer constructor: unavailable: Reflective setAccessible(true) disabled
11:20:33.170 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- java.nio.Bits.unaligned: available, true
11:20:33.170 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable: class io.netty.util.internal.PlatformDependent0$7 cannot access class jdk.internal.misc.Unsafe (in module java.base) because module java.base does not export jdk.internal.misc to unnamed module @209da20d
11:20:33.172 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- java.nio.DirectByteBuffer.<init>(long, {int,long}): unavailable
11:20:33.172 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- sun.misc.Unsafe: available
11:20:33.178 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- maxDirectMemory: 536870912 bytes (maybe)
11:20:33.178 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- -Dio.netty.tmpdir: C:\Users\PAOLA~1.CAR\AppData\Local\Temp (java.io.tmpdir)
11:20:33.178 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- -Dio.netty.bitMode: 64 (sun.arch.data.model)
11:20:33.178 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- Platform: Windows
11:20:33.178 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- -Dio.netty.maxDirectMemory: -1 bytes
11:20:33.178 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- -Dio.netty.uninitializedArrayAllocationThreshold: -1
11:20:33.181 [Test worker] DEBUG io.netty.util.internal.CleanerJava9 -- java.nio.ByteBuffer.cleaner(): available
11:20:33.181 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- -Dio.netty.noPreferDirect: false
11:20:33.182 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
11:20:33.182 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
11:20:33.182 [Test worker] DEBUG com.intuit.karate -- request:
1 > POST http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters
1 > Content-Type: application/json; charset=UTF-8
1 > Content-Length: 143
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
1 > Accept-Encoding: gzip,deflate
{"name":"Iron Man_f2decac0-b687-444c-916d-4f1ca470c3c1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]}

11:20:33.182 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
11:20:33.182 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 3][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:33.182 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
11:20:33.182 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/54.165.58.209:80
11:20:33.287 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.18.45:42403<->54.165.58.209:80
11:20:33.287 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-3: set socket timeout to 30000
11:20:33.287 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request POST /testuser/api/characters HTTP/1.1
11:20:33.287 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
11:20:33.287 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
11:20:33.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> POST /testuser/api/characters HTTP/1.1
11:20:33.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> Content-Type: application/json; charset=UTF-8
11:20:33.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> Content-Length: 143
11:20:33.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
11:20:33.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> Connection: Keep-Alive
11:20:33.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
11:20:33.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> Accept-Encoding: gzip,deflate
11:20:33.287 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "POST /testuser/api/characters HTTP/1.1[\r][\n]"
11:20:33.287 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "Content-Type: application/json; charset=UTF-8[\r][\n]"
11:20:33.287 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "Content-Length: 143[\r][\n]"
11:20:33.287 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
11:20:33.287 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "Connection: Keep-Alive[\r][\n]"
11:20:33.287 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)[\r][\n]"
11:20:33.287 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "Accept-Encoding: gzip,deflate[\r][\n]"
11:20:33.287 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "[\r][\n]"
11:20:33.287 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "{"name":"Iron Man_f2decac0-b687-444c-916d-4f1ca470c3c1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]}"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "HTTP/1.1 201 [\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Server: Cowboy[\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}[\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D[\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Connection: keep-alive[\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Content-Type: application/json[\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Transfer-Encoding: chunked[\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Date: Fri, 20 Jun 2025 16:20:33 GMT[\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Via: 1.1 vegur[\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "[\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "99[\r][\n]"
11:20:33.392 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "{"id":1357,"name":"Iron Man_f2decac0-b687-444c-916d-4f1ca470c3c1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]}[\r][\n]"
11:20:33.395 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << HTTP/1.1 201 
11:20:33.395 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Server: Cowboy
11:20:33.395 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}
11:20:33.395 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D
11:20:33.395 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
11:20:33.395 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Connection: keep-alive
11:20:33.395 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Content-Type: application/json
11:20:33.395 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Transfer-Encoding: chunked
11:20:33.395 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Date: Fri, 20 Jun 2025 16:20:33 GMT
11:20:33.395 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Via: 1.1 vegur
11:20:33.395 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
11:20:33.397 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "0[\r][\n]"
11:20:33.397 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "[\r][\n]"
11:20:33.397 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 3][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
11:20:33.397 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-3: set socket timeout to 0
11:20:33.397 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 3][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:33.397 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
11:20:33.397 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-3: Close connection
11:20:33.397 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
11:20:33.397 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 215
1 < 201
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 16:20:33 GMT
1 < Via: 1.1 vegur
{"id":1357,"name":"Iron Man_f2decac0-b687-444c-916d-4f1ca470c3c1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]}

11:20:33.398 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['name']
11:20:33.398 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['id']
11:20:33.398 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
11:20:33.398 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
11:20:33.398 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
11:20:33.398 [Test worker] DEBUG com.intuit.karate -- request:
1 > POST http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters
1 > Content-Type: application/json; charset=UTF-8
1 > Content-Length: 77
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
1 > Accept-Encoding: gzip,deflate
{"name":"Iron Man","alterego":"Otro","description":"Otro","powers":["Armor"]}

11:20:33.398 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
11:20:33.398 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 4][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:33.398 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
11:20:33.398 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/54.165.58.209:80
11:20:33.512 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.18.45:42404<->54.165.58.209:80
11:20:33.512 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-4: set socket timeout to 30000
11:20:33.512 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request POST /testuser/api/characters HTTP/1.1
11:20:33.512 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
11:20:33.512 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
11:20:33.512 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> POST /testuser/api/characters HTTP/1.1
11:20:33.512 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> Content-Type: application/json; charset=UTF-8
11:20:33.512 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> Content-Length: 77
11:20:33.512 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
11:20:33.512 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> Connection: Keep-Alive
11:20:33.512 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
11:20:33.512 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> Accept-Encoding: gzip,deflate
11:20:33.512 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "POST /testuser/api/characters HTTP/1.1[\r][\n]"
11:20:33.512 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "Content-Type: application/json; charset=UTF-8[\r][\n]"
11:20:33.512 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "Content-Length: 77[\r][\n]"
11:20:33.512 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
11:20:33.512 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "Connection: Keep-Alive[\r][\n]"
11:20:33.512 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)[\r][\n]"
11:20:33.512 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "Accept-Encoding: gzip,deflate[\r][\n]"
11:20:33.512 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "[\r][\n]"
11:20:33.512 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "{"name":"Iron Man","alterego":"Otro","description":"Otro","powers":["Armor"]}"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "HTTP/1.1 400 [\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Server: Cowboy[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Connection: keep-alive[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Content-Type: application/json[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Transfer-Encoding: chunked[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Date: Fri, 20 Jun 2025 16:20:33 GMT[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Via: 1.1 vegur[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "29[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "{"error":"Character name already exists"}[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << HTTP/1.1 400 
11:20:33.615 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Server: Cowboy
11:20:33.615 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}
11:20:33.615 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D
11:20:33.615 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
11:20:33.615 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Connection: keep-alive
11:20:33.615 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Content-Type: application/json
11:20:33.615 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Transfer-Encoding: chunked
11:20:33.615 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Date: Fri, 20 Jun 2025 16:20:33 GMT
11:20:33.615 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Via: 1.1 vegur
11:20:33.615 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "0[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "[\r][\n]"
11:20:33.615 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 4][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
11:20:33.615 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-4: set socket timeout to 0
11:20:33.615 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 4][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:33.615 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
11:20:33.615 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-4: Close connection
11:20:33.615 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
11:20:33.615 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 217
1 < 400
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 16:20:33 GMT
1 < Via: 1.1 vegur
{"error":"Character name already exists"}

11:20:33.618 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
11:20:33.625 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
11:20:33.625 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
11:20:33.625 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
11:20:33.625 [Test worker] DEBUG com.intuit.karate -- request:
1 > POST http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters
1 > Content-Type: application/json; charset=UTF-8
1 > Content-Length: 44
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
1 > Accept-Encoding: gzip,deflate
{"alterego":"","description":"","powers":[]}

11:20:33.625 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
11:20:33.625 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 5][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:33.625 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
11:20:33.625 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/54.165.58.209:80
11:20:33.728 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.18.45:42405<->54.165.58.209:80
11:20:33.728 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-5: set socket timeout to 30000
11:20:33.728 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request POST /testuser/api/characters HTTP/1.1
11:20:33.728 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
11:20:33.728 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
11:20:33.728 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> POST /testuser/api/characters HTTP/1.1
11:20:33.728 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> Content-Type: application/json; charset=UTF-8
11:20:33.728 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> Content-Length: 44
11:20:33.728 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
11:20:33.728 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> Connection: Keep-Alive
11:20:33.728 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
11:20:33.728 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> Accept-Encoding: gzip,deflate
11:20:33.728 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "POST /testuser/api/characters HTTP/1.1[\r][\n]"
11:20:33.728 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "Content-Type: application/json; charset=UTF-8[\r][\n]"
11:20:33.728 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "Content-Length: 44[\r][\n]"
11:20:33.728 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
11:20:33.728 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "Connection: Keep-Alive[\r][\n]"
11:20:33.728 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)[\r][\n]"
11:20:33.728 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "Accept-Encoding: gzip,deflate[\r][\n]"
11:20:33.728 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "[\r][\n]"
11:20:33.728 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "{"alterego":"","description":"","powers":[]}"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "HTTP/1.1 400 [\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Server: Cowboy[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Connection: keep-alive[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Content-Type: application/json[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Transfer-Encoding: chunked[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Date: Fri, 20 Jun 2025 16:20:33 GMT[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Via: 1.1 vegur[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "84[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "{"name":"Name is required","description":"Description is required","powers":"Powers are required","alterego":"Alterego is required"}[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "0[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "[\r][\n]"
11:20:33.835 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << HTTP/1.1 400 
11:20:33.835 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Server: Cowboy
11:20:33.835 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}
11:20:33.835 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D
11:20:33.835 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
11:20:33.835 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Connection: keep-alive
11:20:33.835 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Content-Type: application/json
11:20:33.835 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Transfer-Encoding: chunked
11:20:33.835 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Date: Fri, 20 Jun 2025 16:20:33 GMT
11:20:33.835 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Via: 1.1 vegur
11:20:33.835 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
11:20:33.835 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 5][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
11:20:33.835 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-5: set socket timeout to 0
11:20:33.835 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 5][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:33.835 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
11:20:33.835 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-5: Close connection
11:20:33.835 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
11:20:33.835 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 210
1 < 400
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 16:20:33 GMT
1 < Via: 1.1 vegur
{"name":"Name is required","description":"Description is required","powers":"Powers are required","alterego":"Alterego is required"}

11:20:33.835 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['name']
11:20:33.847 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
11:20:33.851 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
11:20:33.851 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
11:20:33.851 [Test worker] DEBUG com.intuit.karate -- request:
1 > PUT http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/55
1 > Content-Type: application/json; charset=UTF-8
1 > Content-Length: 119
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
1 > Accept-Encoding: gzip,deflate
{"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]}

11:20:33.851 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
11:20:33.851 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 6][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:33.852 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
11:20:33.852 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/54.165.58.209:80
11:20:33.948 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.18.45:42406<->54.165.58.209:80
11:20:33.948 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-6: set socket timeout to 30000
11:20:33.948 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request PUT /testuser/api/characters/55 HTTP/1.1
11:20:33.948 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
11:20:33.948 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
11:20:33.948 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> PUT /testuser/api/characters/55 HTTP/1.1
11:20:33.948 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> Content-Type: application/json; charset=UTF-8
11:20:33.948 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> Content-Length: 119
11:20:33.948 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
11:20:33.948 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> Connection: Keep-Alive
11:20:33.948 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
11:20:33.948 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> Accept-Encoding: gzip,deflate
11:20:33.948 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "PUT /testuser/api/characters/55 HTTP/1.1[\r][\n]"
11:20:33.948 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "Content-Type: application/json; charset=UTF-8[\r][\n]"
11:20:33.948 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "Content-Length: 119[\r][\n]"
11:20:33.948 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
11:20:33.948 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "Connection: Keep-Alive[\r][\n]"
11:20:33.948 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)[\r][\n]"
11:20:33.948 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "Accept-Encoding: gzip,deflate[\r][\n]"
11:20:33.948 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "[\r][\n]"
11:20:33.948 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "{"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]}"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "HTTP/1.1 200 [\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Server: Cowboy[\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}[\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D[\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Connection: keep-alive[\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Content-Type: application/json[\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Transfer-Encoding: chunked[\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Date: Fri, 20 Jun 2025 16:20:33 GMT[\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Via: 1.1 vegur[\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "[\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "7f[\r][\n]"
11:20:34.052 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "{"id":55,"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]}[\r][\n]"
11:20:34.053 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << HTTP/1.1 200 
11:20:34.053 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Server: Cowboy
11:20:34.053 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}
11:20:34.053 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D
11:20:34.053 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
11:20:34.053 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Connection: keep-alive
11:20:34.053 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Content-Type: application/json
11:20:34.053 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Transfer-Encoding: chunked
11:20:34.053 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Date: Fri, 20 Jun 2025 16:20:33 GMT
11:20:34.053 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Via: 1.1 vegur
11:20:34.053 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
11:20:34.054 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "0[\r][\n]"
11:20:34.054 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "[\r][\n]"
11:20:34.054 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 6][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
11:20:34.054 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-6: set socket timeout to 0
11:20:34.054 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 6][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:34.054 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
11:20:34.054 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-6: Close connection
11:20:34.054 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
11:20:34.054 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 203
1 < 200
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436433&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=JY6%2FLbdOp%2FZXAMMZIT55RDgpyjuwni5cpGgYO5KPllo%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 16:20:33 GMT
1 < Via: 1.1 vegur
{"id":55,"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]}

11:20:34.055 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['id']
11:20:34.061 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
11:20:34.061 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
11:20:34.061 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
11:20:34.061 [Test worker] DEBUG com.intuit.karate -- request:
1 > PUT http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/-999
1 > Content-Type: application/json; charset=UTF-8
1 > Content-Length: 119
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
1 > Accept-Encoding: gzip,deflate
{"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]}

11:20:34.061 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
11:20:34.061 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 7][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:34.061 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
11:20:34.061 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/54.165.58.209:80
11:20:34.163 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.18.45:42407<->54.165.58.209:80
11:20:34.164 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-7: set socket timeout to 30000
11:20:34.164 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request PUT /testuser/api/characters/-999 HTTP/1.1
11:20:34.164 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
11:20:34.164 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
11:20:34.164 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> PUT /testuser/api/characters/-999 HTTP/1.1
11:20:34.164 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> Content-Type: application/json; charset=UTF-8
11:20:34.164 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> Content-Length: 119
11:20:34.164 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
11:20:34.164 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> Connection: Keep-Alive
11:20:34.164 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
11:20:34.164 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> Accept-Encoding: gzip,deflate
11:20:34.164 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "PUT /testuser/api/characters/-999 HTTP/1.1[\r][\n]"
11:20:34.164 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "Content-Type: application/json; charset=UTF-8[\r][\n]"
11:20:34.164 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "Content-Length: 119[\r][\n]"
11:20:34.164 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
11:20:34.164 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "Connection: Keep-Alive[\r][\n]"
11:20:34.164 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)[\r][\n]"
11:20:34.164 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "Accept-Encoding: gzip,deflate[\r][\n]"
11:20:34.164 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "[\r][\n]"
11:20:34.164 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "{"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]}"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "HTTP/1.1 404 [\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Server: Cowboy[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Connection: keep-alive[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Content-Type: application/json[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Transfer-Encoding: chunked[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Date: Fri, 20 Jun 2025 16:20:34 GMT[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Via: 1.1 vegur[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "1f[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "{"error":"Character not found"}[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "0[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "[\r][\n]"
11:20:34.271 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << HTTP/1.1 404 
11:20:34.271 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Server: Cowboy
11:20:34.271 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}
11:20:34.271 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D
11:20:34.271 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
11:20:34.271 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Connection: keep-alive
11:20:34.271 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Content-Type: application/json
11:20:34.271 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Transfer-Encoding: chunked
11:20:34.271 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Date: Fri, 20 Jun 2025 16:20:34 GMT
11:20:34.271 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Via: 1.1 vegur
11:20:34.272 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
11:20:34.272 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 7][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
11:20:34.272 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-7: set socket timeout to 0
11:20:34.272 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 7][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:34.272 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
11:20:34.272 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-7: Close connection
11:20:34.272 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
11:20:34.273 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 211
1 < 404
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 16:20:34 GMT
1 < Via: 1.1 vegur
{"error":"Character not found"}

11:20:34.274 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
11:20:34.274 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
11:20:34.274 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
11:20:34.274 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
11:20:34.274 [Test worker] DEBUG com.intuit.karate -- request:
1 > POST http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters
1 > Content-Type: application/json; charset=UTF-8
1 > Content-Length: 143
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
1 > Accept-Encoding: gzip,deflate
{"name":"Iron Man_aa9e10b3-7331-431f-9cf9-5a1aa285e1cc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]}

11:20:34.274 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
11:20:34.274 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 8][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:34.274 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
11:20:34.274 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/54.165.58.209:80
11:20:34.382 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.18.45:42408<->54.165.58.209:80
11:20:34.382 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-8: set socket timeout to 30000
11:20:34.382 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request POST /testuser/api/characters HTTP/1.1
11:20:34.382 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
11:20:34.382 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
11:20:34.382 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> POST /testuser/api/characters HTTP/1.1
11:20:34.382 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> Content-Type: application/json; charset=UTF-8
11:20:34.382 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> Content-Length: 143
11:20:34.382 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
11:20:34.382 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> Connection: Keep-Alive
11:20:34.382 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
11:20:34.382 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> Accept-Encoding: gzip,deflate
11:20:34.388 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "POST /testuser/api/characters HTTP/1.1[\r][\n]"
11:20:34.388 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "Content-Type: application/json; charset=UTF-8[\r][\n]"
11:20:34.388 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "Content-Length: 143[\r][\n]"
11:20:34.388 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
11:20:34.388 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "Connection: Keep-Alive[\r][\n]"
11:20:34.388 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)[\r][\n]"
11:20:34.388 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "Accept-Encoding: gzip,deflate[\r][\n]"
11:20:34.388 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "[\r][\n]"
11:20:34.388 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "{"name":"Iron Man_aa9e10b3-7331-431f-9cf9-5a1aa285e1cc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]}"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "HTTP/1.1 201 [\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Server: Cowboy[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Connection: keep-alive[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Content-Type: application/json[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Transfer-Encoding: chunked[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Date: Fri, 20 Jun 2025 16:20:34 GMT[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Via: 1.1 vegur[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "99[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "{"id":1358,"name":"Iron Man_aa9e10b3-7331-431f-9cf9-5a1aa285e1cc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]}[\r][\n]"
11:20:34.492 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << HTTP/1.1 201 
11:20:34.492 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Server: Cowboy
11:20:34.492 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}
11:20:34.492 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D
11:20:34.492 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
11:20:34.492 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Connection: keep-alive
11:20:34.492 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Content-Type: application/json
11:20:34.492 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Transfer-Encoding: chunked
11:20:34.492 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Date: Fri, 20 Jun 2025 16:20:34 GMT
11:20:34.492 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Via: 1.1 vegur
11:20:34.492 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
11:20:34.498 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "0[\r][\n]"
11:20:34.498 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "[\r][\n]"
11:20:34.498 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 8][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
11:20:34.498 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-8: set socket timeout to 0
11:20:34.498 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 8][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:34.498 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
11:20:34.498 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-8: Close connection
11:20:34.498 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
11:20:34.498 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 224
1 < 201
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 16:20:34 GMT
1 < Via: 1.1 vegur
{"id":1358,"name":"Iron Man_aa9e10b3-7331-431f-9cf9-5a1aa285e1cc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]}

11:20:34.500 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['name']
11:20:34.500 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['id']
11:20:34.501 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
11:20:34.501 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
11:20:34.501 [Test worker] DEBUG com.intuit.karate -- request:
2 > DELETE http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/1358
2 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
2 > Connection: Keep-Alive
2 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
2 > Accept-Encoding: gzip,deflate


11:20:34.501 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
11:20:34.501 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 9][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:34.501 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
11:20:34.501 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/54.165.58.209:80
11:20:34.601 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.18.45:42409<->54.165.58.209:80
11:20:34.601 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-9: set socket timeout to 30000
11:20:34.601 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request DELETE /testuser/api/characters/1358 HTTP/1.1
11:20:34.601 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
11:20:34.601 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
11:20:34.601 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 >> DELETE /testuser/api/characters/1358 HTTP/1.1
11:20:34.601 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
11:20:34.601 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 >> Connection: Keep-Alive
11:20:34.601 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
11:20:34.601 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 >> Accept-Encoding: gzip,deflate
11:20:34.601 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "DELETE /testuser/api/characters/1358 HTTP/1.1[\r][\n]"
11:20:34.601 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
11:20:34.601 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "Connection: Keep-Alive[\r][\n]"
11:20:34.601 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)[\r][\n]"
11:20:34.601 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "Accept-Encoding: gzip,deflate[\r][\n]"
11:20:34.601 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "[\r][\n]"
11:20:34.721 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "HTTP/1.1 204 [\r][\n]"
11:20:34.721 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Server: Cowboy[\r][\n]"
11:20:34.721 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Content-Length: 0[\r][\n]"
11:20:34.721 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}[\r][\n]"
11:20:34.721 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D[\r][\n]"
11:20:34.721 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
11:20:34.721 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Connection: keep-alive[\r][\n]"
11:20:34.721 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Date: Fri, 20 Jun 2025 16:20:34 GMT[\r][\n]"
11:20:34.721 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Via: 1.1 vegur[\r][\n]"
11:20:34.721 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "[\r][\n]"
11:20:34.721 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << HTTP/1.1 204 
11:20:34.721 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Server: Cowboy
11:20:34.721 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Content-Length: 0
11:20:34.721 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}
11:20:34.721 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D
11:20:34.721 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
11:20:34.721 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Connection: keep-alive
11:20:34.721 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Date: Fri, 20 Jun 2025 16:20:34 GMT
11:20:34.721 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Via: 1.1 vegur
11:20:34.721 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
11:20:34.721 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 9][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
11:20:34.721 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-9: set socket timeout to 0
11:20:34.721 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 9][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:34.727 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
11:20:34.727 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-9: Close connection
11:20:34.727 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
11:20:34.727 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 226
2 < 204
2 < Server: Cowboy
2 < Content-Length: 0
2 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}
2 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D
2 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
2 < Connection: keep-alive
2 < Date: Fri, 20 Jun 2025 16:20:34 GMT
2 < Via: 1.1 vegur


11:20:34.734 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
11:20:34.734 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
11:20:34.734 [Test worker] DEBUG com.intuit.karate -- request:
1 > DELETE http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/-999
1 > Content-Type: application/json
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
1 > Accept-Encoding: gzip,deflate


11:20:34.734 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
11:20:34.734 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 10][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:34.734 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
11:20:34.734 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/54.165.58.209:80
11:20:34.832 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.18.45:42410<->54.165.58.209:80
11:20:34.832 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-10: set socket timeout to 30000
11:20:34.832 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request DELETE /testuser/api/characters/-999 HTTP/1.1
11:20:34.832 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
11:20:34.832 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
11:20:34.832 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 >> DELETE /testuser/api/characters/-999 HTTP/1.1
11:20:34.832 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 >> Content-Type: application/json
11:20:34.832 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
11:20:34.832 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 >> Connection: Keep-Alive
11:20:34.832 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)
11:20:34.832 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 >> Accept-Encoding: gzip,deflate
11:20:34.832 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 >> "DELETE /testuser/api/characters/-999 HTTP/1.1[\r][\n]"
11:20:34.832 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 >> "Content-Type: application/json[\r][\n]"
11:20:34.832 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
11:20:34.832 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 >> "Connection: Keep-Alive[\r][\n]"
11:20:34.832 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.10)[\r][\n]"
11:20:34.832 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 >> "Accept-Encoding: gzip,deflate[\r][\n]"
11:20:34.832 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 >> "[\r][\n]"
11:20:34.938 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "HTTP/1.1 404 [\r][\n]"
11:20:34.938 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "Server: Cowboy[\r][\n]"
11:20:34.938 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}[\r][\n]"
11:20:34.938 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D[\r][\n]"
11:20:34.938 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
11:20:34.938 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "Connection: keep-alive[\r][\n]"
11:20:34.938 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "Content-Type: application/json[\r][\n]"
11:20:34.938 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "Transfer-Encoding: chunked[\r][\n]"
11:20:34.938 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "Date: Fri, 20 Jun 2025 16:20:34 GMT[\r][\n]"
11:20:34.938 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "Via: 1.1 vegur[\r][\n]"
11:20:34.938 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "[\r][\n]"
11:20:34.941 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 << HTTP/1.1 404 
11:20:34.941 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 << Server: Cowboy
11:20:34.941 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}
11:20:34.941 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D
11:20:34.941 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
11:20:34.941 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 << Connection: keep-alive
11:20:34.941 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 << Content-Type: application/json
11:20:34.941 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 << Transfer-Encoding: chunked
11:20:34.941 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 << Date: Fri, 20 Jun 2025 16:20:34 GMT
11:20:34.941 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-10 << Via: 1.1 vegur
11:20:34.941 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
11:20:34.941 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "1f[\r][\n]"
11:20:34.941 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "{"error":"Character not found"}[\r][\n]"
11:20:34.941 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "0[\r][\n]"
11:20:34.941 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-10 << "[\r][\n]"
11:20:34.941 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 10][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
11:20:34.941 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-10: set socket timeout to 0
11:20:34.941 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 10][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
11:20:34.941 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
11:20:34.941 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-10: Close connection
11:20:34.942 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
11:20:34.942 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 207
1 < 404
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750436434&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FIVSLaFqTn9tCrSeDwNDmY%2BN7nBeVi5kAjBqJuYmKCc%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 16:20:34 GMT
1 < Via: 1.1 vegur
{"error":"Character not found"}

11:20:34.943 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
11:20:34.976 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
11:20:35.076 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@6c0b51da
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@7c9beb51
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@133aacbe
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@6c0b51da
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@2aa5bd48
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
11:20:35.076 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED
---------------------------------------------------------
feature: classpath:features/karate-test.feature
scenarios: 10 | passed: 10 | failed:  0 | time: 3,3603
---------------------------------------------------------

Karate version: 1.4.1
======================================================
elapsed:   5,21 | threads:    1 | thread time: 3,36 
features:     1 | skipped:    0 | efficiency: 0,64
scenarios:   10 | passed:    10 | failed: 0
======================================================
11:20:35.670 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
11:20:35.682 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@29090809
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@261275ae
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@502c087e
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@29090809
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@49986178
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
11:20:35.682 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED
11:20:35.709 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
11:20:35.717 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@72715e61
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@69499c6f
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@3451fc88
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@72715e61
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@1e0294a7
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
11:20:35.717 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED
11:20:35.748 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
11:20:35.748 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@60a4e619
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@563ada5
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@12548f9a
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@60a4e619
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@156ff70f
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
11:20:35.748 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED

HTML report: (paste into browser to view) | Karate version: 1.4.1
file:///C:/Users/paola.cardenas_devsu/IdeaProjects/test-automatisation-base/build/karate-reports/karate-summary.html
===================================================================

]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
